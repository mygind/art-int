%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 12.0.1%%For: (PeopleGroup) (PeopleGroup)%%Title: (DTU Informatics B UK 8.0.eps)%%CreationDate: 24/01/08 15:50%%BoundingBox: -31 343 271 370%%HiResBoundingBox: -30.6328 343.8994 270.0742 369.2715%%DocumentProcessColors: Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKCustomColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 65537 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 400 300 400 300%AI3_TileBox: 101.6001 -87.5 697.5 688.5%AI3_DocumentPreview: Header%AI5_ArtSize: 14400 14400%AI5_RulerUnits: 1%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: 5.5 436.5 6 1373 912 18 0 0 50 73 0 0%AI5_OpenViewLayers: 7%%PageOrigin:-66.3003 -266.2988%AI7_GridSettings: 17.0079 8 17.0079 8 1 0 0.29 1 1 0.65 1 1%AI9_Flatten: 1%AI12_CMSettings: 00.MS%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp5 Bn%AI5_BeginGradient: (Gray Linear Gradient)(Gray Linear Gradient) 0 7 Bd[<0A0B0C0C0D0E0F10111213141516161718191A1B1C1D1E1F20212223242526272728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C><070808090A0A0B0C0C0D0E0E0F10101112131314151516171818191A1A1B1C1D1D1E1F1F202122222324252526272828292A2A2B2C2D2D2E2F30303132333334353636373839393A3B3C3C3D3E3F3F404142424344454546474848494A4B4B4C4D4E4E4F5051><0607070808090A0A0B0C0C0D0E0E0F1010111212131414151616171818191A1A1B1C1C1D1E1F1F20212122232324252526272828292A2A2B2C2C2D2E2F2F30313132333334353636373838393A3B3B3C3D3D3E3F40404142424344454546474748494A4A4B4C><000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101>1 %_Br<1A1918171615141211100F0E0D0C0B0A><1110100F0E0E0D0C0C0B0A0A09080807><11100F0F0E0D0D0C0B0A0A0908070706>01 %_Br<54535251504F4E4D4C4B4A4948464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A><3C3B3A3A393837373635343333323130302F2E2D2D2C2B2A2A292827272625242423222121201F1E1E1D1C1B1B1A191818171615151413121211><3D3C3B3A3A393837373635343433323130302F2E2D2D2C2B2A2A292827262625242323222120201F1E1D1C1C1B1A191918171616151413121211>01 %_Br<000000000000010101010102020202030303040404050505060606070708080809090A0A0B0B0C0C0D0D0E0E0F0F10101111121313141415161617171819191A1B1B1C1D1D1E1F1F202122222324242526272728292A2A2B2C2D2E2E2F3031323333343536373839393A3B3C3D3E3F40414142434445464748494A4B4C4D4E4F5051525354><0000000000000001010101010102020202020303030304040404050505050606060707070808080909090A0A0B0B0B0C0C0C0D0D0E0E0F0F0F1010111112121313131414151516161717181819191A1B1B1C1C1D1D1E1E1F1F202121222223242425252627272828292A2A2B2C2C2D2D2E2F2F30313132333334353536373838393A3A3B3C><00000000000000010101010101020202020203030303040404040505050606060607070708080809090A0A0A0B0B0B0C0C0D0D0E0E0E0F0F1010111111121213131414151516161717181819191A1A1B1C1C1D1D1E1E1F1F202121222223242425252627272828292A2A2B2C2C2D2E2E2F3030313232333434353636373838393A3B3B3C3D>01 %_Br<0A0909080706050403020100><070706060504040302010100><060605050404030302010100>01 %_Br<1717161615141413121211100F0F0E0D0C0C0B0A><161515141413121111100F0E0D0C0C0B0A090807><171616151414131211100F0E0D0C0B0A09080706>01 %_Br[0.421875 0.316406 0.296875 0.003906 1 87 91.573 %_BS%_0.421875 0.316406 0.296875 0.003906 1 87 91.573 Bs0.039063 0.027344 0.023438 0 1 51.3513 49.4382 %_BS%_0.039063 0.027344 0.023438 0 1 51.3513 49.4382 Bs0.101563 0.066406 0.066406 0 1 50 33.1461 %_BS%_0.101563 0.066406 0.066406 0 1 50 33.1461 Bs0.328125 0.234375 0.238281 0 1 50 17.4157 %_BS%_0.328125 0.234375 0.238281 0 1 50 17.4157 Bs0 0 0 0 1 64.5161 0.005 %_BS%_0 0 0 0 1 64.5161 0 Bs0.039063 0.027344 0.023438 0 1 56.1798 0.0025 %_BS%_0.039063 0.027344 0.023438 0 1 56.1798 0 Bs0.089844 0.085938 0.089844 0 1 56.1798 0 %_BS%_0.089844 0.085938 0.089844 0 1 56.1798 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Linear Gradient 1)(Linear Gradient 1) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Purple Radial Gradient)(Purple Radial Gradient) 1 3 Bd[<000101020304040506070708090A0A0B0C0D0E0E0F101111121314141516171818191A1B1B1C1D1E1F1F2021222223242526262728292A2A2B2C2D2D2E2F303131323334353536373839393A3B3C3D3D3E3F404141424344444546474848494A4B4C4C4D4E4F5050515253545455565758><00010203040505060708090A0B0C0D0E0F101112131415161718191A1B1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E><0000000000000000000101010101010101010101010101010102020202020202020202020202020202020303030303030303030303030303030304040404040404040404040404040404050505050505050505050505050505060606060606060606060606060606060707070707070707>01 %_Br<585858585959595A5A5A5B5B5C5C5D5D5D5E5E5F5F606061616262636364646565666667686869696A6A6B6C6C6D6D6E6E6F707071717273737475757676777878797A7A7B7C7C7D7D7E7F7F80818182838384858686878888898A8A8B8C8C8D8E8F8F90919192939494959696979899999A9B9C9C9D9E9E9FA0A1A1A2A3A4A4A5A6A7A7A8A9AAABABACADAEAEAFB0B1B2B2B3B4B5B5B6B7B8B9B9BABBBCBDBDBEBFC0C1C1C2C3C4C5C5C6C7C8C9C9CACBCCCDCECECF><6E6E6E6E6F6F707071717172727374747575767677777879797A7A7B7C7C7D7E7E7F8080818282838484858686878889898A8B8B8C8D8E8E8F909191929394959596979898999A9B9C9C9D9E9FA0A0A1A2A3A4A5A5A6A7A8A9AAAAABACADAEAFAFB0B1B2B3B4B5B6B6B7B8B9BABBBCBDBDBEBFC0C1C2C3C4C5C6C6C7C8C9CACBCCCDCECFD0D1D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><0707070707070708080808080808080809090909090909090A0A0A0A0A0A0A0B0B0B0B0B0B0C0C0C0C0C0C0C0D0D0D0D0D0D0E0E0E0E0E0E0F0F0F0F0F0F10101010101011111111111212121212121313131313141414141415151515151516161616161717171717181818181819191919191A1A1A1A1A1B1B1B1B1B1C1C1C1C1D1D1D1D1D1E1E1E1E1E1F1F1F1F1F2020202021212121212222222222232323232424242424252525252626262626272727272828><0000000000000000000000000000000001010101010101010101010101010101010101010102020202020202020202020202020202020202030303030303030303030303030303030304040404040404040404040404040404050505050505050505050505050505050606060606060606060606060606060707070707070707070707070707080808080808080808080808080809090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B>1 %_Br[0 0 0 0 1 50.7937 0 %_BS%_0 0 0 0 1 50.7937 0 Bs0.34375 0.429688 0.027344 0 1 57.3913 35.955 %_BS%_0.34375 0.429688 0.027344 0 1 57.3913 35.955 Bs0.8125 1 0.15625 0.042969 1 51.0204 100 %_BS%_0.8125 1 0.15625 0.042969 1 51.0204 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 1)(Radial Gradient 1) 1 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[1 0 50 0 %_BS%_1 0 50 0 Bs0 0 50 100 %_BS%_0 0 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Red Linear Gradient)(Red Linear Gradient) 0 6 Bd[<3A393837363534333231302F2E2D2C2B2A2928272524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A0908070605040302><FFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFC><FFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFDFDFCFCFCFCFCFCFCFBFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9F9F9F8F8F8F8F8F8F8F7F7F7F7><2A292828272625252423222121201F1E1E1D1C1B1B1A191818171615151413121111100F0E0E0D0C0B0B0A09080807060505040302020100>1 %_Br<2324242526272728292A2B2B2C2D2E2E2F303131323334343536373738393A>11<0B0C0D0E0F101112131415161718191A1B1C1D1F202122232425262728292A>1 %_Br<09090909090A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F101010101010101010101111111111111111111212121212121212121213131313131313131313141414141414141414141515151515151515151516161616161616161616161717171717171717171717181818181818181818181819191919191919191919191A1A1A1A1A1A1A1A1A1A1A1A1B1B1B1B1B1B1B1B1B1B1B1B1C1C1C1C1C1C1C1C1C1C1C1C1D1D1D1D1D1D1D1D1D1D1D1D1D1E1E1E1E1E1E1E1E1E1E1E1E1E1E1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F2020202020202020202020202020202021212121212121212121212121212121212122222222222222222222222222222222222222222222232323232323232323232323232323><3E3F3F40414243444545464748494A4B4B4C4D4E4F5050515253545555565758595A5A5B5C5D5E5F5F6061626363646566676868696A6B6C6C6D6E6F707071727373747576777778797A7B7B7C7D7E7E7F808181828384858586878888898A8B8B8C8D8E8E8F90919192939394959696979899999A9B9B9C9D9E9E9FA0A0A1A2A3A3A4A5A5A6A7A7A8A9A9AAABACACADAEAEAFB0B0B1B2B2B3B4B4B5B6B6B7B8B8B9BABABBBBBCBDBDBEBFBFC0C1C1C2C2C3C4C4C5C6C6C7C7C8C9C9CACACBCCCCCDCDCECFCFD0D0D1D2D2D3D3D4D4D5D6D6D7D7D8D8D9D9DADADBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4E4E5E5E6E6E7E7E8E8E9E9EAEAEBEBECECECEDEDEEEEEFEFF0F0F0F1F1F2F2F2F3F3F4F4F4F5F5F6F6F6F7F7F7F8F8F8F9F9F9FAFAFAFBFBFBFCFCFCFCFDFDFDFDFEFEFEFEFEFFFFFFFFFF><1F202122232425262728292A2B2C2D2E2F30313233343536373838393A3B3C3D3E3F404142434445464748494A4B4C4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646465666768696A6B6C6D6D6E6F70717273747475767778797A7B7B7C7D7E7F8081818283848586868788898A8B8C8C8D8E8F909091929394959596979899999A9B9C9D9D9E9FA0A1A1A2A3A4A5A5A6A7A8A8A9AAABABACADAEAEAFB0B1B1B2B3B4B4B5B6B7B7B8B9BABABBBCBCBDBEBFBFC0C1C1C2C3C3C4C5C6C6C7C8C8C9CACACBCCCCCDCECECFD0D0D1D1D2D3D3D4D5D5D6D7D7D8D8D9DADADBDBDCDDDDDEDEDFE0E0E1E1E2E2E3E4E4E5E5E6E6E7E7E8E8E9E9EAEBEBECECEDEDEEEEEFEFEFF0F0F1F1F2F2F3F3F4F4F4F5F5F6F6F7F7F7F8F8F9F9F9FAFAFAFBFBFBFCFCFCFDFDFDFDFEFEFEFEFEFFFFFFFF><000000000000000000000001010101010101010101010101010101010101010102020202020202020202020202020202020202020203030303030303030303030303030303030303030303030404040404040404040404040404040404040404040404050505050505050505050505050505050505050505050505060606060606060606060606060606060606060606060606060607070707070707070707070707070707070707070707070707070708080808080808080808080808080808080808080808080808080808080909090909090909090909090909090909090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B>1 %_Br<020202020202020202020202020202020303030303030303030303030303030303030303030303030303030303030303040404040404040404040404040404040404040404040404040404040404040405050505050505050505050505050505050505050505050505050505050505050606060606060606060606060606060606060606060606060606060606060606060607070707070707070707070707070707070707070707070707070707070707070707070808080808080808080808080808080808080808080808080808080808080808080808080808090909090909090909090909090909090909090909><FCFBFAF9F8F8F7F6F5F4F3F2F1F1F0EFEEEDECEBEAEAE9E8E7E6E5E4E3E3E2E1E0DFDEDDDDDCDBDAD9D8D7D6D6D5D4D3D2D1D0D0CFCECDCCCBCACAC9C8C7C6C5C4C4C3C2C1C0BFBFBEBDBCBBBAB9B9B8B7B6B5B4B4B3B2B1B0AFAEAEADACABAAA9A9A8A7A6A5A4A4A3A2A1A09F9F9E9D9C9B9B9A9998979696959493929291908F8E8D8D8C8B8A898988878685858483828181807F7E7D7D7C7B7A797978777676757473727271706F6F6E6D6C6B6B6A696868676665656463626261605F5F5E5D5C5C5B5A59595857575655545453525251504F4F4E4D4D4C4B4B4A494948474746454544434342424140403F3F3E3E><F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959594939291908F8E8D8C8B8A89888786868584838281807F7E7D7C7B7A79797877767574737271706F6E6E6D6C6B6A69686766656564636261605F5E5D5D5C5B5A59585756555554535251504F4E4E4D4C4B4A4948484746454443434241403F3E3E3D3C3B3A393938373635353433323131302F2E2D2D2C2B2A2A29282727262525242323222121201F1F>01 %_Br<04040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040403030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202><1D1E1F20212223242425262728292A2B2C2D2E2F30313232333435363738393A3B3C3D3D3E3F40414243444546464748494A4B4C4D4E4E4F50515253545555565758595A5B5B5C5D5E5F6061616263646566666768696A6B6B6C6D6E6F707071727374757576777879797A7B7C7D7D7E7F808181828384848586878888898A8B8B8C8D8E8E8F909191929394949596979798999A9A9B9C9D9D9E9F9FA0A1A2A2A3A4A4A5A6A7A7A8A9A9AAABABACADADAEAFAFB0B1B1B2B3B3B4B5B5B6B7B7B8B9B9BABBBBBCBDBDBEBFBFC0C0C1C2C2C3C3C4C5C5C6C7C7C8C8C9C9CACBCBCCCCCDCECECFCFD0D0D1D2D2D3D3D4D4D5D5D6D6D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4E4E5E5E5E6E6E7E7E8E8E9E9E9EAEAEBEBECECECEDEDEEEEEEEFEFEFF0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8F8F8F9F9F9F9FAFAFAFAFAFBFBFBFBFBFBFCFCFCFCFCFC><0D0E0F101112131415161718191A1B1C1D1E1F20212223242526262728292A2B2C2D2E2F30313233343536373839393A3B3C3D3E3F40414243444546464748494A4B4C4D4E4F4F50515253545556575858595A5B5C5D5E5F5F60616263646565666768696A6B6B6C6D6E6F7070717273747575767778797A7A7B7C7D7E7E7F8081828283848586868788898A8A8B8C8D8E8E8F909191929394949596979798999A9A9B9C9D9D9E9FA0A0A1A2A2A3A4A5A5A6A7A7A8A9AAAAABACACADAEAEAFB0B0B1B2B2B3B4B5B5B6B7B7B8B8B9BABABBBCBCBDBEBEBFC0C0C1C1C2C3C3C4C4C5C6C6C7C8C8C9C9CACACBCCCCCDCDCECFCFD0D0D1D1D2D2D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4E4E4E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBEBECECEDEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F2F3F3F3F4F4F4F4F5F5F5F5F5F6F6F6F6F6F6F7F7F7F7F7F7>01 %_Br[0.007813 0.988281 0.96875 0 1 22.7273 100 %_BS%_0.007813 0.988281 0.96875 0 1 22.7273 100 Bs0.226563 1 1 0.164063 1 50 93.2584 %_BS%_0.226563 1 1 0.164063 1 50 93.2584 Bs0.136719 1 1 0.042969 1 50 62.3595 %_BS%_0.136719 1 1 0.042969 1 50 62.3595 Bs0.035156 0.242188 0.121094 0 1 39.3939 34.8315 %_BS%_0.035156 0.242188 0.121094 0 1 39.3939 34.8315 Bs0.007813 0.988281 0.96875 0 1 46.5116 10.6742 %_BS%_0.007813 0.988281 0.96875 0 1 46.5116 10.6742 Bs0.015625 0.113281 0.050781 0 1 37.5 2.24719 %_BS%_0.015625 0.113281 0.050781 0 1 37.5 2.24719 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Checked Pattern)(Checked Pattern) 46.0313 5.4375 113.3027 72.7207 [%AI3_Tile(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer0 J 0 j 3 w 4 M []0 d0 XR25.0313 11.4375 m31.0313 5.4375 LF25.0313 5.4375 m31.0313 11.4375 LF%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR79.6699 5.44141 mF%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR79.6699 5.44141 mS%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR67.7813 0.511719 m67.7813 10.3691 L74.7383 17.332 L84.5996 17.332 L91.5605 10.373 L91.5605 0.515625 L67.7813 0.511719 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR67.7813 0.511719 m67.7813 10.3691 L74.7383 17.332 L84.5996 17.332 L91.5605 10.373 L91.5605 0.515625 L67.7813 0.511719 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR46.0313 5.4375 mF%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR46.0313 5.4375 mS%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR41.1035 0.5 m41.1016 17.3281 L50.959 17.3281 L57.9199 10.3691 L57.9219 0.511719 L41.1035 0.5 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR41.1035 0.5 m41.1016 17.3281 L50.959 17.3281 L57.9199 10.3691 L57.9219 0.511719 L41.1035 0.5 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR113.3086 5.44141 mF%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR113.3086 5.44141 mS%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR118.2188 0.515625 m101.418 0.511719 L101.418 10.3691 L108.377 17.332 L118.2363 17.332 L118.2188 0.515625 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR118.2188 0.515625 m101.418 0.511719 L101.418 10.3691 L108.377 17.332 L118.2363 17.332 L118.2188 0.515625 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR46.0273 39.0781 mF%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR46.0273 39.0781 mS%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR41.0977 50.9668 m50.9551 50.9688 L57.916 44.0078 L57.918 34.1484 L50.957 27.1875 L41.0996 27.1875 L41.0977 50.9668 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR41.0977 50.9668 m50.9551 50.9688 L57.916 44.0078 L57.918 34.1484 L50.957 27.1875 L41.0996 27.1875 L41.0977 50.9668 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR62.8477 22.2598 mF%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR62.8477 22.2598 mS%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR57.9199 10.3691 m50.959 17.3281 L50.957 27.1875 L57.918 34.1484 L67.7773 34.1484 L74.7383 27.1914 L74.7383 17.332 L67.7813 10.3691 L57.9199 10.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR57.9199 10.3691 m50.959 17.3281 L50.957 27.1875 L57.918 34.1484 L67.7773 34.1484 L74.7383 27.1914 L74.7383 17.332 L67.7813 10.3691 L57.9199 10.3691 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR96.4883 22.2637 mF%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR96.4883 22.2637 mS%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR91.5605 10.373 m84.5996 17.332 L84.5977 27.1914 L91.5566 34.1523 L101.416 34.1523 L108.377 27.1953 L108.377 17.334 L101.418 10.373 L91.5605 10.373 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR91.5605 10.373 m84.5996 17.332 L84.5977 27.1914 L91.5566 34.1523 L101.416 34.1523 L108.377 27.1953 L108.377 17.334 L101.418 10.373 L91.5605 10.373 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR113.3066 39.082 mF%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR113.3066 39.082 mS%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR118.2363 27.1914 m108.377 27.1914 L101.4141 34.1484 L101.4141 44.0098 L108.373 50.9707 L118.2344 50.9707 L118.2363 27.1914 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR118.2363 27.1914 m108.377 27.1914 L101.4141 34.1484 L101.4141 44.0098 L108.373 50.9707 L118.2344 50.9707 L118.2363 27.1914 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR96.4844 55.9023 mF%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR96.4844 55.9023 mS%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR91.5566 44.0117 m84.5957 50.9707 L84.5938 60.8311 L91.5527 67.792 L101.4141 67.792 L108.373 60.834 L108.373 50.9746 L101.4141 44.0137 L91.5566 44.0117 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR91.5566 44.0117 m84.5957 50.9707 L84.5938 60.8311 L91.5527 67.792 L101.4141 67.792 L108.373 60.834 L108.373 50.9746 L101.4141 44.0137 L91.5566 44.0117 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR62.8457 55.8994 mF%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR62.8457 55.8994 mS%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR57.916 44.0078 m50.9551 50.9688 L50.9531 60.8271 L57.9141 67.7881 L67.7734 67.7891 L74.7344 60.8301 L74.7363 50.9707 L67.7773 44.0098 L57.916 44.0078 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR57.916 44.0078 m50.9551 50.9688 L50.9531 60.8271 L57.9141 67.7881 L67.7734 67.7891 L74.7344 60.8301 L74.7363 50.9707 L67.7773 44.0098 L57.916 44.0078 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR46.0254 72.7168 mF%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR46.0254 72.7168 mS%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR57.9141 77.6484 m57.9141 67.7881 L50.9551 60.8271 L41.0977 60.8262 L41.0938 77.625 L57.9141 77.6484 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR57.9141 77.6484 m57.9141 67.7881 L50.9551 60.8271 L41.0977 60.8262 L41.0938 77.625 L57.9141 77.6484 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR79.6641 72.7207 mF%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR79.6641 72.7207 mS%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR91.5527 77.6523 m91.5527 67.792 L84.5957 60.8311 L74.7363 60.8301 L67.7734 67.7891 L67.7734 77.6494 L91.5527 77.6523 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR91.5527 77.6523 m91.5527 67.792 L84.5957 60.8311 L74.7363 60.8301 L67.7734 67.7891 L67.7734 77.6494 L91.5527 77.6523 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR113.3027 72.7207 mF%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR113.3027 72.7207 mS%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR118.2344 60.8311 m108.373 60.8301 L101.4141 67.7891 L101.4121 77.6494 L118.2188 77.6523 L118.2344 60.8311 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR118.2344 60.8311 m108.373 60.8301 L101.4141 67.7891 L101.4121 77.6494 L118.2188 77.6523 L118.2344 60.8311 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR79.666 39.082 mF%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR79.666 39.082 mS%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR74.7383 27.1914 m67.7773 34.1484 L67.7773 44.0098 L74.7363 50.9707 L84.5957 50.9707 L91.5566 44.0117 L91.5566 34.1523 L84.5977 27.1914 L74.7383 27.1914 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR74.7383 27.1914 m67.7773 34.1484 L67.7773 44.0098 L74.7363 50.9707 L84.5957 50.9707 L91.5566 44.0117 L91.5566 34.1523 L84.5977 27.1914 L74.7383 27.1914 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.78125 0.089844 0.457031 0 k 0.78125 0.089844 0.457031 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR7.46094 27.1816 m0.501953 34.1406 L0.5 44 L7.45898 50.9609 L17.3184 50.9609 L24.2793 44.0039 L24.2813 34.1445 L17.3223 27.1836 L7.46094 27.1816 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k 0.742188 0.980469 0.007813 0.003906 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR7.46094 27.1816 m0.501953 34.1406 L0.5 44 L7.45898 50.9609 L17.3184 50.9609 L24.2793 44.0039 L24.2813 34.1445 L17.3223 27.1836 L7.46094 27.1816 Ls101.4141 67.7891 m101.4141 77.6494 L91.5527 77.6494 L91.5527 67.7891 L101.4141 67.7891 Lf67.7813 0.511719 m67.7813 10.3691 L57.9199 10.3691 L57.9199 0.511719 L67.7813 0.511719 Lf101.418 0.511719 m101.418 10.3691 L91.5586 10.3691 L91.5586 0.511719 L101.418 0.511719 Lf84.5996 17.332 m84.5996 27.1914 L74.7383 27.1914 L74.7383 17.332 L84.5996 17.332 Lf67.7773 34.1484 m67.7773 44.0098 L57.918 44.0098 L57.918 34.1484 L67.7773 34.1484 Lf50.957 17.3281 m50.957 27.1875 L41.1016 27.1875 L41.1016 17.3281 L50.957 17.3281 Lf118.2363 17.332 m118.2363 27.1914 L108.377 27.1914 L108.377 17.332 L118.2363 17.332 Lf101.4141 34.1484 m101.4141 44.0098 L91.5566 44.0098 L91.5566 34.1484 L101.4141 34.1484 Lf84.5977 50.9707 m84.5977 60.8301 L74.7363 60.8301 L74.7363 50.9707 L84.5977 50.9707 Lf67.7734 67.7891 m67.7734 77.6494 L57.9141 77.6494 L57.9141 67.7891 L67.7734 67.7891 Lf50.9551 50.9688 m50.9551 60.8271 L41.0977 60.8271 L41.0977 50.9688 L50.9551 50.9688 Lf118.2344 50.9707 m118.2344 60.8301 L108.373 60.8301 L108.373 50.9707 L118.2344 50.9707 Lf17.3203 52.9609 m17.3203 62.8213 L7.46094 62.8213 L7.46094 52.9609 L17.3203 52.9609 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed 18)0 Auu0 J 0 j 1 w 4 M []0 d0 XR-3918.7319 4618.8438 m-3810.1599 4618.8438 L-3810.1599 4617.4312 L-3918.7319 4617.4312 L-3918.7319 4618.8438 Lnu0 O0.695313 0.671875 0.636719 0.738281 k-3810.1599 4617.4688 m-3810.2112 4617.4312 L-3810.3442 4617.5352 L-3810.1599 4617.4688 Lf-3811.0344 4617.6997 m-3811.0088 4617.7188 -3811.0212 4617.75 -3810.9951 4617.769 C-3810.4817 4617.4727 L-3810.7112 4617.3047 -3810.8833 4617.8125 -3811.0344 4617.6997 cf-3811.1855 4617.6699 m-3811.3848 4617.6006 -3811.4673 4617.7393 -3811.5137 4617.7871 C-3811.4441 4617.6792 -3811.1423 4617.8203 -3811.1855 4617.6699 Cf-3828.7217 4617.7393 m-3828.7031 4617.7383 -3828.6785 4617.7344 -3828.6599 4617.73 C-3828.6912 4617.7256 -3828.7112 4617.73 -3828.7217 4617.7393 Cf-3833.2969 4618.2119 m-3833.3447 4618.3232 L-3832.4912 4618.125 -3831.5281 4618.3262 -3830.6252 4618.2393 C-3830.6863 4618.2793 L-3828.3953 4618.3223 -3826.2825 4618.1367 -3824.0095 4618.0518 C-3824.0449 4618.0645 -3824.0569 4618.0967 -3824.0935 4618.1094 c-3823.9839 4618.0713 -3823.8623 4618 -3823.7393 4618.0093 C-3823.7073 4618.0342 -3823.7737 4618.061 -3823.8132 4618.0723 C-3823.3333 4618.2559 -3822.4033 4617.9561 -3822.1033 4618.0977 C-3821.9683 4618.0781 -3821.9087 4618.0015 -3821.9839 4617.9429 C-3820.2048 4617.896 -3818.3015 4617.8608 -3816.4895 4617.7168 C-3816.4023 4617.7422 -3816.3865 4617.792 -3816.4104 4617.8555 C-3814.8616 4617.5576 -3813.2383 4617.6763 -3811.6536 4617.7246 C-3811.5928 4617.6465 -3811.8152 4617.6416 -3811.6592 4617.5601 C-3812.1687 4617.4624 -3812.5923 4617.7524 -3813.0544 4617.6094 C-3812.9951 4617.5342 L-3813.3313 4617.4854 -3813.0632 4617.7246 -3813.4121 4617.6274 C-3813.5496 4617.5645 -3813.3777 4617.5313 -3813.4417 4617.5254 C-3814.1563 4617.5566 -3814.9016 4617.4883 -3815.5745 4617.6719 C-3815.7407 4617.5078 -3816.3423 4617.666 -3816.6064 4617.5093 C-3816.7913 4617.5742 -3816.9768 4617.5576 -3817.0471 4617.666 C-3819.5481 4617.5796 -3822.1033 4617.7383 -3824.6653 4617.7261 C-3825.8643 4618.0435 -3827.3 4617.665 -3828.7231 4617.7715 C-3828.7329 4617.7603 -3828.7312 4617.748 -3828.7217 4617.7393 C-3829.1855 4617.8174 -3829.8616 4617.8545 -3830.4153 4617.8145 C-3830.8843 4617.9492 L-3834.2161 4617.6729 -3837.6208 4617.8672 -3841.0049 4617.7524 c-3844.8503 4617.6729 -3848.2192 4617.4453 -3851.9641 4617.8633 C-3851.9592 4617.832 -3851.9895 4617.8145 -3851.8928 4617.8022 C-3852.9736 4617.8662 -3853.9583 4617.7524 -3854.9761 4617.8184 C-3854.9729 4617.7871 L-3857.4983 4618.0488 -3860.2295 4617.7524 -3862.6641 4618.0342 C-3865.6279 4618.0059 -3868.9792 4618.0342 -3872.1162 4618.1152 C-3872.1089 4618.0518 L-3874.6191 4618.1846 -3877.0449 4617.8516 -3879.5496 4617.9517 C-3882.1252 4617.8086 -3884.8464 4618.3125 -3887.4441 4618.1211 C-3889.0513 4617.8125 -3891.1624 4618.4741 -3892.6721 4618.1543 C-3895.7737 4617.6719 -3898.7825 4617.9824 -3901.8833 4618.2715 C-3904.7439 4618.0996 -3907.6001 4618.541 -3910.3704 4618.1904 C-3911.6831 4618.415 -3913.1328 4617.9121 -3914.5935 4617.9766 C-3914.5413 4618.0547 L-3915.0657 4617.8184 -3915.7097 4618.3853 -3916.0369 4618.0342 C-3915.9817 4618.0181 L-3916.2593 4617.8398 -3916.6265 4618.4385 -3916.7952 4618.2261 C-3916.8401 4618.3145 L-3917.1763 4618.3398 -3916.8799 4618.2144 -3917.1392 4618.1792 C-3917.2368 4618.1904 -3917.1763 4618.3398 -3917.3799 4618.2891 C-3917.4241 4617.9287 -3918.2031 4618.3672 -3918.2263 4617.9624 C-3918.0425 4617.9624 -3918.5144 4617.8057 -3918.1016 4617.7207 C-3918.2192 4617.6792 -3918.7825 4617.6992 -3918.7319 4617.8711 C-3918.78 4618.0537 -3919 4618.2124 -3918.6577 4618.3535 C-3918.5889 4618.2207 L-3918.4736 4618.3535 -3918.5012 4618.2871 -3918.46 4618.3867 C-3918.0127 4618.4043 -3917.9529 4618.5977 -3917.6321 4618.6772 C-3917.6353 4618.6729 -3917.6384 4618.6699 -3917.6335 4618.6631 C-3917.4143 4618.5039 -3917.1111 4618.5977 -3916.9375 4618.6211 C-3916.8679 4618.6953 L-3916.7625 4618.8496 -3916.3591 4618.3926 -3916.4951 4618.6582 C-3915.5857 4618.5923 -3914.5432 4618.5957 -3913.5271 4618.5923 C-3913.3848 4618.4912 -3912.7493 4618.6016 -3912.9712 4618.4072 c-3912.7168 4618.6289 -3911.9607 4618.6846 -3911.6799 4618.6763 C-3911.6904 4618.6973 -3911.7024 4618.7207 -3911.7463 4618.7124 C-3911.2017 4619 -3911.1008 4618.4463 -3910.5903 4618.7979 C-3910.5105 4618.5493 -3909.6631 4618.8774 -3909.3743 4618.5854 C-3909.3113 4618.6406 -3909.2903 4618.6904 -3909.3132 4618.7344 C-3908.3943 4618.7393 -3907.3792 4618.8296 -3906.6016 4618.8408 C-3905.9373 4618.623 -3904.9929 4618.9395 -3904.4216 4618.6387 C-3903.9482 4618.7017 -3903.1824 4618.8281 -3902.5215 4618.707 C-3902.5857 4618.7437 L-3901.8401 4618.7261 -3900.9087 4618.7104 -3900.3972 4618.5215 C-3900.1768 4618.8096 -3899.8545 4618.7524 -3899.5322 4618.8438 C-3899.0344 4618.7104 -3898.0295 4618.75 -3897.27 4618.6289 C-3897.1536 4618.7617 -3896.6433 4618.5723 -3896.6042 4618.7656 C-3894.4761 4618.3926 -3891.8447 4618.5225 -3889.5723 4618.8047 C-3889.6052 4618.8184 L-3889.3103 4618.7124 -3888.9705 4618.4785 -3888.6704 4618.3413 C-3888.6409 4618.3584 -3888.6443 4618.3896 -3888.7073 4618.3896 C-3888.2922 4618.3535 -3887.9041 4618.5435 -3887.4895 4618.5078 C-3887.4929 4618.54 -3887.4929 4618.54 -3887.5601 4618.5703 C-3887.1711 4618.4844 -3886.7561 4618.7246 -3886.2969 4618.5752 C-3886.2712 4618.6265 L-3885.9792 4618.5547 L-3885.9863 4618.6182 -3885.9976 4618.7144 -3886.1536 4618.6934 C-3882.5903 4618.7559 -3878.9121 4618.4248 -3875.2537 4618.4727 C-3875.3879 4618.5332 L-3874.6785 4618.4248 L-3874.6824 4618.457 -3874.7161 4618.4727 -3874.75 4618.4873 C-3873.8464 4618.5957 -3872.9087 4618.415 -3872.0281 4618.4424 C-3872.0322 4618.4736 -3872.1655 4618.5352 -3872.0422 4618.5703 C-3871.3904 4618.396 -3870.9951 4618.7964 -3870.6687 4618.4351 C-3870.6384 4618.4517 -3870.6177 4618.5332 -3870.6841 4618.5625 C-3868.8704 4618.4424 -3867.0081 4618.4492 -3865.1809 4618.5078 C-3863.6592 4618.1807 -3861.9583 4618.4766 -3860.3777 4618.2168 C-3860.3855 4618.2822 L-3858.3391 4618.0537 -3856.1682 4618.2979 -3854.0471 4618.2524 C-3853.1663 4618.2783 -3852.5713 4618.2012 -3851.6863 4618.1973 C-3851.6641 4618.2783 L-3850.1743 4617.9688 -3848.5327 4618.5566 -3846.9785 4618.2158 C-3847.0857 4618.3262 L-3846.8447 4618.1553 -3846.1455 4618.3867 -3846.2375 4618.0933 C-3845.9631 4618.1816 L-3844.9072 4617.7949 -3844.0413 4618.3608 -3842.7473 4618.1094 C-3842.8323 4618.1792 L-3842.4883 4618.125 -3842.0872 4618.082 -3841.8323 4618.1465 C-3841.8721 4618.1563 -3841.8535 4618.1768 -3841.9353 4618.1953 C-3840.8577 4618.4707 -3839.6584 4618.166 -3838.5215 4618.1768 C-3838.6504 4618.3062 L-3838.1008 4618.1543 -3837.0928 4618.2959 -3836.3704 4618.2261 C-3836.4143 4618.2871 L-3836.0488 4618.2012 L-3836.0393 4618.3232 L-3835.0991 4618.332 -3834.2144 4618.2261 -3833.2969 4618.2119 Cf-3823.8132 4618.0723 m-3823.8159 4618.0713 -3823.8201 4618.0713 -3823.8232 4618.0684 C-3823.8513 4618.0791 -3823.8376 4618.0781 -3823.8132 4618.0723 Cf-3917.5168 4618.7017 m-3917.5601 4618.6953 -3917.5959 4618.6875 -3917.6321 4618.6772 C-3917.6233 4618.7017 -3917.5537 4618.6973 -3917.5168 4618.7017 cfUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 2)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7791.3833 8491.4551 m-7699.5479 8491.4551 L-7699.5479 8487.1758 L-7791.3833 8487.1758 L-7791.3833 8491.4551 Ln0 O0.695313 0.671875 0.636719 0.738281 k-7791.1631 8488.7754 m-7791.5 8488.8418 -7790.9814 8489.0313 -7791.3833 8488.8887 C-7791.3379 8488.7705 -7791.2725 8488.6816 -7791.1631 8488.7754 Cf-7700.6675 8488.9414 m-7701.7524 8489.7041 -7703.1816 8488.9336 -7704.3701 8489.4199 C-7704.5098 8489.4521 -7704.3345 8489.002 -7704.6484 8489.1025 C-7705.8008 8489.6953 -7707.6162 8489.3418 -7709.0195 8488.8848 C-7708.9346 8488.7666 L-7709.2017 8488.6816 -7709.5283 8489.0723 -7709.8115 8489.0176 C-7709.8135 8488.9395 -7709.7207 8488.9063 -7709.7861 8488.7979 C-7709.8574 8489.0352 -7710.2983 8488.9082 -7710.4185 8489.084 C-7710.5303 8488.9922 -7710.5195 8488.8047 -7710.6641 8488.7002 C-7710.8262 8488.9697 L-7711.2769 8489.6094 -7711.9209 8488.9258 -7712.5361 8489.2559 C-7712.5063 8489.1934 -7712.4453 8489.1445 -7712.4941 8489.084 C-7713.4814 8489.4727 -7714.7168 8489.3994 -7715.8208 8489.543 C-7715.7769 8489.4482 -7715.7363 8489.2754 -7715.8008 8489.168 C-7715.8555 8489.4512 -7716.1963 8489.5225 -7716.4922 8489.5781 C-7716.6255 8489.2871 -7716.9995 8489.8438 -7717.3467 8489.6826 C-7717.3169 8489.6191 L-7717.5732 8489.9238 -7717.6973 8489.4434 -7717.9053 8489.8086 C-7718.0684 8489.5801 L-7718.1807 8489.9902 -7718.4395 8489.3672 -7718.6514 8489.5762 C-7718.6445 8489.6602 L-7718.8442 8489.7598 -7718.9482 8489.5537 -7719.1338 8489.623 C-7719.1514 8489.5762 L-7719.5854 8489.6826 -7719.8379 8489.4551 -7719.8271 8489.7754 C-7719.9795 8489.5186 -7719.4063 8489.6582 -7719.6455 8489.2842 C-7721.0732 8489.6152 -7722.5459 8489.5498 -7723.9834 8489.5566 C-7724.1465 8489.4277 -7724.2505 8489.3887 -7724.2871 8489.2666 C-7724.4307 8489.332 -7724.8281 8489.3262 -7724.9585 8489.4902 C-7724.9102 8489.4834 -7725.0513 8489.3262 -7725.1274 8489.3105 C-7725.3887 8489.1895 -7725.4131 8489.6621 -7725.7002 8489.5186 C-7725.5859 8489.4336 -7725.5469 8489.3301 -7725.5854 8489.2109 C-7725.8301 8489.4609 -7726.1577 8489.4209 -7726.4473 8489.502 C-7726.4023 8489.4482 -7726.3325 8489.416 -7726.3433 8489.3154 C-7726.6602 8489.5986 -7726.9209 8489.2559 -7727.1982 8489.4346 C-7727.0947 8489.25 L-7727.5415 8489.0254 -7727.2266 8489.6367 -7727.6128 8489.5039 C-7727.52 8489.4453 -7727.5527 8489.373 -7727.5361 8489.2979 C-7727.8965 8489.6338 -7728.4795 8489.5225 -7728.8389 8489.6367 C-7728.8174 8489.6113 -7728.8232 8489.5605 Y-7729.2148 8489.6025 -7729.6245 8489.498 -7730.0552 8489.6445 C-7730.2119 8489.5625 -7730.0039 8489.1934 -7730.4185 8489.2617 C-7730.4033 8489.6328 -7731.1221 8489.4141 -7730.8779 8489.834 C-7731.2319 8489.7734 -7731.7925 8489.6338 -7732.0283 8489.7598 C-7731.8691 8489.6191 -7732.2007 8489.3066 -7731.9063 8489.2754 C-7732.1289 8489.0498 L-7732.0957 8488.8984 -7731.8999 8489.1016 -7731.9707 8488.9102 C-7732.1182 8488.9258 -7732.5479 8489.0723 -7732.6797 8489.0117 C-7732.9531 8489.2393 -7733.2041 8489.6641 -7733.6465 8489.7109 C-7733.4385 8489.5664 -7733.7646 8489.3018 -7733.6235 8489.2383 C-7734.2407 8489.9482 L-7734.3877 8489.9658 -7734.2725 8489.6563 -7734.4854 8489.7529 C-7734.4746 8489.8506 -7734.5674 8489.9121 -7734.6318 8489.9922 C-7734.6875 8489.9482 -7735.2441 8490.084 -7735.3081 8489.7178 C-7735.3735 8489.5762 -7735.0684 8489.6426 -7735.2314 8489.5117 C-7735.5029 8489.5146 -7735.5151 8489.6406 -7735.7871 8489.6465 C-7735.7925 8489.5977 L-7735.9717 8489.543 -7736.3213 8489.7529 -7736.1265 8489.9551 C-7736.0015 8489.9658 -7736.1738 8489.7354 -7735.9888 8489.8418 C-7736.1152 8490.0537 -7736.4312 8490.1133 -7736.7031 8490.1162 C-7736.6104 8490.0586 -7736.6216 8489.9609 -7736.5845 8489.8574 C-7736.9497 8490.1445 -7737.3369 8490.2354 -7737.7451 8490.3555 C-7737.7515 8490.5293 -7737.5928 8490.0391 -7737.5327 8490.1309 C-7738.0557 8489.8896 -7738.6128 8490.4727 -7739.0479 8490.1201 C-7738.9766 8490.0898 -7739.0098 8490.3672 -7739.0146 8490.3184 C-7739.2666 8490.2969 -7739.2549 8490.0449 -7739.4189 8490.1377 C-7739.4355 8489.9902 -7739.6255 8490.1855 -7739.7944 8490.2305 C-7739.8818 8490.3369 -7739.8384 8490.1582 -7739.6914 8490.1426 C-7739.9268 8490.2666 -7740.8691 8490.4941 -7741.4131 8490.2793 C-7741.4023 8490.377 -7741.7471 8490.6377 -7741.8721 8490.627 C-7741.8232 8490.3984 L-7741.9375 8490.2617 -7742.2422 8490.418 -7742.2632 8490.2227 C-7742.5303 8490.5 -7741.2344 8489.9863 -7741.5957 8490.2002 C-7741.6895 8490.0098 -7742.0991 8490.5645 -7742.0215 8490.2529 C-7742.2725 8490.2617 -7742.5161 8490.5186 -7742.7559 8490.3047 C-7742.6865 8490.3418 -7742.5522 8489.9873 -7742.7549 8490.0039 C-7743.1123 8490.0449 -7742.8564 8490.1133 -7743.1465 8490.1895 C-7743.3281 8490.2832 L-7743.3398 8490.5059 -7743.6475 8490.2529 -7743.5146 8490.502 C-7743.5586 8490.3184 -7744.0337 8490.6152 -7743.9971 8490.2461 C-7743.9473 8489.9551 L-7744.1016 8489.9766 -7744.2002 8490.2617 -7744.3213 8490.3896 C-7744.3418 8490.3633 -7744.3823 8490.3047 -7744.3745 8490.2578 C-7744.3994 8490.7031 -7744.7432 8490.2207 -7744.9268 8490.5645 C-7745.2505 8490.4102 -7745.7495 8490.5498 -7745.9023 8490.2734 C-7746.1514 8490.4082 -7746.3784 8490.5674 -7746.6621 8490.4727 C-7746.6055 8490.4307 -7746.5283 8490.418 -7746.5122 8490.3223 C-7746.6904 8490.1914 -7746.7344 8490.3086 -7746.8975 8490.3809 C-7746.8608 8490.3145 -7747.2539 8490.1201 -7747.4521 8489.9629 C-7747.6992 8490.0957 -7747.6143 8490.3359 -7747.6392 8490.4824 C-7747.8652 8490.043 -7748.3379 8490.7656 -7748.6211 8490.3672 C-7748.5352 8490.3066 -7748.2598 8490.1514 -7748.4658 8490.041 C-7748.6919 8489.6025 -7748.9219 8490.3643 -7749.2861 8490.1543 C-7749.1968 8490.5186 L-7749.3594 8490.293 -7749.7334 8490.7305 -7749.6963 8490.3594 C-7749.8184 8490.4902 -7750.1265 8490.2383 -7750.0859 8490.5938 C-7750.6846 8490.293 -7751.5425 8490.7754 -7751.9102 8490.1377 C-7751.9961 8490.1973 -7752.2104 8490.1367 -7752.1665 8490.3193 C-7752.0239 8490.5176 -7751.9673 8490.1777 -7751.9141 8490.3125 C-7751.9912 8490.3232 -7752.0078 8490.4209 -7752.0161 8490.4697 C-7752.2021 8490.3887 -7752.3486 8490.3633 -7752.1729 8490.0674 C-7752.5869 8489.8477 -7752.6001 8490.6719 -7753.1274 8490.5322 C-7753.1035 8490.3857 -7753.1436 8490.3301 -7753.2979 8490.3535 C-7753.5903 8490.6055 L-7753.9312 8490.5469 -7753.7842 8490.2705 -7753.7925 8490.0215 C-7753.9746 8490.0645 -7754.1973 8490.0527 -7754.2803 8490.2383 C-7754.5015 8489.9258 L-7754.3398 8490.1514 -7754.6514 8490.0762 -7754.7368 8490.1367 C-7754.6514 8490.0762 L-7754.6846 8489.9697 -7754.8955 8490.0352 -7755.0024 8490.0664 C-7754.9766 8490.2207 -7754.7617 8490.2832 -7754.6445 8490.3281 C-7754.7373 8490.4375 -7754.8823 8490.4121 -7755.0059 8490.541 C-7754.9648 8490.2969 -7755.3027 8490.3672 -7755.4473 8490.3418 C-7755.6133 8490.2891 -7755.6348 8490.5605 -7755.6831 8490.5527 C-7755.6875 8490.4258 -7755.9541 8490.5313 -7755.8247 8490.3535 C-7755.7681 8490.3125 -7755.6953 8490.4766 -7755.6016 8490.3643 C-7755.7109 8490.2705 -7755.6982 8490.0498 -7755.9258 8490.2109 C-7756.0967 8490.332 -7755.8818 8490.6934 -7756.2061 8490.5391 C-7756.1211 8490.4785 -7756.1055 8490.3809 -7756.0391 8490.293 C-7756.3433 8490.166 L-7756.3564 8490.3887 L-7756.3975 8490.332 -7756.3691 8490.3125 -7756.3877 8490.2832 C-7756.4785 8490.5176 -7756.8521 8490.3555 -7756.9209 8490.6191 C-7757.0742 8490.6426 -7757.2441 8490.4648 -7757.3906 8490.4395 C-7757.3623 8490.4199 L-7757.5415 8490.2891 -7757.7793 8490.375 -7757.9297 8490.5254 C-7757.9219 8490.4766 L-7758.0195 8490.459 -7758.2505 8490.4941 -7758.3735 8490.625 C-7758.6201 8490.457 -7758.4561 8489.7842 -7758.7295 8490.0645 C-7758.98 8490.0723 -7759.1221 8490.4727 -7759.0215 8490.6152 C-7759.4717 8490.4648 -7759.9834 8490.8281 -7760.4009 8490.4824 C-7760.4658 8490.5723 -7760.4248 8490.6289 -7760.5586 8490.6816 C-7761.2197 8490.5938 -7761.9551 8490.9453 -7762.4814 8490.5078 C-7762.29 8490.4141 -7762.4688 8490.2842 -7762.4727 8490.1582 C-7762.6309 8490.3574 -7762.6631 8489.9512 -7762.7197 8490.293 C-7762.7041 8490.4941 -7762.7197 8490.5918 -7762.5337 8490.6729 C-7762.9282 8490.7813 -7763.5283 8490.7813 -7763.7471 8490.5938 C-7763.6377 8490.6865 -7763.7227 8490.748 -7763.8086 8490.8086 C-7763.7803 8490.4873 -7764.0713 8490.4395 -7764.2915 8490.5527 C-7764.3223 8490.748 L-7764.4658 8490.5469 L-7764.5503 8490.6094 -7764.5591 8490.957 -7764.7773 8490.7695 C-7764.7891 8490.6934 -7764.8018 8490.6162 -7764.8418 8490.5605 C-7765.0693 8490.7207 -7765.3906 8490.9922 -7765.6377 8490.8262 C-7765.8398 8490.541 L-7765.9453 8490.5723 -7766.1235 8490.7441 -7765.9375 8490.8262 C-7766.3594 8490.6543 -7766.6309 8490.6328 -7766.7646 8490.3857 C-7767.4912 8490.9873 -7768.5459 8491.0117 -7769.3906 8490.9688 C-7769.3652 8490.8223 L-7769.5923 8490.6855 -7769.4834 8491.0781 -7769.6416 8490.9766 C-7769.5684 8490.8369 -7769.8145 8490.6729 -7769.6362 8490.502 C-7769.9609 8490.3477 -7770.0547 8490.7559 -7770.2656 8490.8223 C-7770.2979 8491.0146 -7770.0957 8490.6992 -7770.1367 8490.9434 C-7770.1729 8491.0117 -7770.5859 8490.793 -7770.6362 8491.084 C-7770.7178 8490.9697 -7770.6543 8490.7559 -7770.6104 8490.6377 C-7770.8086 8490.7793 L-7771.0513 8490.4395 -7770.2559 8490.1719 -7770.5107 8489.7529 C-7770.6934 8489.7979 L-7770.8682 8489.4941 -7770.21 8489.4551 -7770.6689 8489.3506 C-7770.8682 8489.4941 -7771.0381 8489.916 -7770.8608 8490.0449 C-7771.2754 8490.125 -7771.0527 8490.7383 -7771.4985 8490.7139 C-7771.6201 8490.543 -7771.1416 8490.6729 -7771.2275 8490.4336 C-7771.4375 8490.1992 -7771.6484 8490.5645 -7771.8354 8490.4824 C-7771.6279 8490.5918 -7771.8032 8490.8857 -7771.9375 8490.9395 C-7772.1641 8490.8018 -7771.79 8490.6641 -7772.1113 8490.6338 C-7772.1641 8490.8018 -7772.4595 8490.9277 -7772.2041 8491.0449 C-7772.3203 8491.4258 -7772.5381 8490.9395 -7772.7129 8491.2344 C-7772.8174 8490.9658 -7772.3823 8490.6152 -7772.7354 8490.4814 C-7772.6792 8490.7393 -7773.1704 8490.832 -7772.9839 8491.2139 C-7773.1221 8491.1406 -7773.1367 8490.9375 -7773.0361 8490.7793 C-7773.2334 8490.6201 -7773.5151 8491.25 -7773.5801 8490.7383 C-7773.6479 8491.002 L-7773.71 8490.916 -7773.7983 8490.8506 -7773.8994 8490.709 C-7774.0732 8490.7041 -7774.46 8491.0664 -7774.4443 8490.668 C-7774.5 8490.709 -7774.8975 8490.6914 -7774.7441 8490.9658 C-7774.4971 8491.1338 -7774.46 8490.7656 -7774.3223 8491.1377 C-7774.4971 8490.834 -7774.6787 8491.1777 -7774.8213 8491.2793 C-7774.8447 8491.125 L-7774.9297 8491.1855 -7775.1255 8491.1514 -7775.1787 8491.3184 C-7775.1133 8491.2305 -7775.1475 8491.125 -7775.2148 8491.0879 C-7775.3042 8491.3223 L-7775.6494 8491.4395 -7775.3857 8490.9102 -7775.7217 8490.9785 C-7775.4663 8490.7969 L-7775.5225 8490.8359 -7775.6367 8490.6162 -7775.7979 8490.6895 C-7775.8604 8490.9033 -7775.9775 8491.1602 -7776.0313 8491.3262 C-7776.2207 8491.4199 -7776.1162 8491.085 -7776.3027 8491.3047 C-7776.0586 8491.0469 L-7776.0215 8490.9766 -7776.2231 8490.6934 -7776.4761 8490.6992 C-7776.6377 8490.7734 -7776.8887 8491.082 -7776.6338 8491.1992 C-7776.7607 8491.2031 -7776.9385 8491.0723 -7776.8379 8490.916 C-7777.1255 8490.9902 -7776.7998 8491.1465 -7777.0479 8491.2793 C-7777.1494 8491.1367 -7777.4658 8490.9336 -7777.6563 8490.7266 C-7777.3975 8490.3682 L-7777.5693 8490.3643 L-7777.3467 8490.0781 -7777.6826 8490.1465 -7777.5566 8489.8438 C-7777.6743 8489.7969 -7777.8169 8489.8994 -7777.9307 8489.9785 C-7777.5864 8490.4629 -7778.3159 8490.6406 -7778.2158 8491.082 C-7778.6875 8491.2031 -7778.5107 8490.0078 -7779.0024 8490.6992 C-7778.9219 8490.8145 -7779.1533 8491.1504 -7778.8564 8491.0225 C-7779.1494 8490.9746 -7779.0557 8491.4658 -7779.4014 8491.2832 C-7779.1455 8491.1016 -7779.6763 8490.8359 -7779.3066 8490.5723 C-7779.3311 8490.7178 -7779.1001 8490.6826 -7779.0435 8490.6426 C-7779.1641 8490.4727 -7779.0186 8490.1973 -7779.3184 8490.1973 C-7779.5015 8490.2393 -7779.7524 8490.248 -7779.7158 8490.4785 C-7779.7085 8490.7314 -7779.4365 8490.4512 -7779.5537 8490.707 C-7779.9185 8490.7949 -7779.9795 8490.4102 -7780.1304 8490.8594 C-7779.8999 8490.8232 -7779.8423 8491.084 -7779.8467 8491.2578 C-7780.1143 8491.3633 L-7780.0625 8491.1953 L-7780.4922 8491.0742 -7780.1895 8491.5 -7780.6055 8491.4551 C-7780.8008 8491.123 L-7780.7017 8490.8369 -7780.1953 8491.25 -7780.2695 8490.7842 C-7780.54 8490.7656 -7780.6299 8491.002 -7780.8848 8490.8818 C-7780.8281 8490.8418 -7780.7505 8490.8301 -7780.6943 8490.7891 C-7780.7915 8490.7734 -7780.8877 8490.1563 -7781.2734 8490.5176 C-7781.4727 8490.6582 -7781.3262 8490.6826 -7781.3311 8490.8574 C-7781.7656 8490.9102 -7781.8955 8491.0879 -7782.1753 8491.1152 C-7782.1177 8490.7754 -7782.6699 8491.082 -7782.3608 8490.7344 C-7782.2188 8490.9336 -7781.5903 8490.9141 -7781.4365 8490.5898 C-7781.5947 8490.1865 -7781.0952 8490.6465 -7781.0024 8490.2383 C-7781.3506 8490.2285 -7781.3335 8489.832 -7781.3896 8489.5723 C-7781.4863 8489.5537 -7781.5801 8489.6641 -7781.6377 8489.7041 C-7781.6787 8489.9482 -7781.5522 8489.9453 -7781.5449 8490.1973 C-7781.9336 8490.1309 -7782.3081 8490.2666 -7782.5225 8490.5059 C-7782.6523 8490.3848 -7782.6113 8490.1406 -7782.4575 8490.1162 C-7782.9199 8490.1895 -7783.4141 8490.1563 -7783.8535 8490.082 C-7783.5693 8490.4814 -7784.3433 8490.1758 -7784.1494 8490.5078 C-7783.9141 8490.5977 -7783.7119 8490.8818 -7783.8418 8491.0605 C-7783.9888 8491.0352 -7783.8369 8490.8857 -7783.8984 8490.8008 C-7784.0859 8491.0186 -7784.1895 8490.4512 -7784.3735 8490.7949 C-7783.9512 8490.666 -7784.2915 8490.3086 -7784.2139 8489.9961 C-7784.5186 8490.1719 -7784.2007 8489.7734 -7784.5024 8489.7734 C-7784.8057 8489.9473 -7785.1787 8490.084 -7785.5161 8490.1514 C-7785.9399 8489.8555 -7786.5898 8490.1465 -7786.9683 8490.1582 C-7787.1665 8490 -7787.0322 8489.6465 -7787.2471 8489.585 C-7787.4995 8489.5918 -7787.0601 8489.9658 -7787.4336 8489.8047 C-7787.3975 8489.7344 L-7787.5107 8489.8154 -7788.0825 8489.4941 -7788.1929 8490.002 C-7788.0776 8489.6191 L-7788.1475 8489.584 -7788.2119 8489.6719 -7788.2695 8489.7129 C-7788.2725 8489.5879 -7788.3535 8489.4746 -7788.2402 8489.3926 C-7788.4707 8489.1289 -7788.7241 8489.4346 -7788.9746 8489.4453 C-7788.8135 8489.6719 L-7789.2422 8489.8496 -7789.5293 8489.625 -7789.9443 8489.7041 C-7789.9316 8489.4824 L-7790.1787 8489.6152 L-7790.1182 8489.3994 -7790.3447 8489.2617 -7790.4751 8489.4414 C-7789.8335 8488.8984 L-7789.6553 8489.0293 -7790.0283 8489.166 -7789.9165 8489.3848 C-7789.8213 8489.5762 -7789.4375 8489.5146 -7789.3755 8489.3018 C-7789.5225 8489.2773 -7789.5293 8489.3262 -7789.6436 8489.4063 C-7789.6919 8489.0977 -7789.4688 8489.1094 -7789.3584 8488.9033 C-7789.4355 8488.916 -7789.5449 8488.8223 -7789.5615 8488.9199 C-7789.4102 8488.7695 -7789.2578 8488.7461 -7789.0059 8488.7383 C-7789.1763 8488.8594 -7788.9131 8488.9297 -7788.9775 8489.0176 C-7788.9575 8488.7461 -7788.7168 8488.6621 -7788.4053 8488.7383 C-7788.1831 8489.0527 -7787.8208 8488.5361 -7787.46 8488.623 C-7787.6064 8488.8984 -7787.7935 8489.1191 -7788.0127 8489.2305 C-7787.7861 8489.3682 -7787.7607 8489.2227 -7787.5337 8489.3613 C-7787.4238 8489.1563 -7787.3457 8488.8418 -7787.0503 8488.7168 C-7787.0342 8488.9199 L-7786.7666 8488.8154 -7786.7666 8488.5146 -7786.4258 8488.5723 C-7785.8418 8488.6719 -7785.2407 8488.6719 -7784.7949 8488.6973 C-7784.7783 8488.8994 L-7784.5303 8488.4658 -7783.9521 8488.7393 -7783.6182 8488.5469 C-7783.0503 8488.7422 -7782.3848 8488.3535 -7782.0938 8488.7031 C-7781.0913 8488.5469 -7780.2148 8488.3945 -7779.1768 8488.4688 C-7779.3516 8488.7637 L-7779.1655 8488.5469 -7779.2305 8488.9336 -7779.0479 8488.8896 C-7779.2578 8488.6543 -7778.7949 8488.584 -7778.6665 8488.4033 C-7778.2041 8488.6328 -7777.6104 8488.3818 -7777.2007 8488.1758 C-7777.1846 8488.3789 L-7776.7705 8487.998 -7776.2759 8488.332 -7775.7598 8488.3945 C-7775.7007 8488.4785 -7775.6074 8488.6689 -7775.4536 8488.6465 C-7775.1738 8488.3184 -7775.0273 8488.3418 -7774.6167 8488.1367 C-7774.3169 8488.1367 -7773.8301 8488.2178 -7773.5254 8488.3457 C-7772.3975 8487.8848 -7771.2456 8488.1797 -7770.0732 8487.9023 C-7769.9888 8488.1406 L-7768.8521 8487.6309 -7767.4541 8488.0938 -7766.4839 8487.832 C-7766.5776 8488.2393 L-7766.2734 8488.3643 -7765.8843 8488.1328 -7765.9619 8487.8438 C-7765.6567 8487.9688 -7765.2007 8487.6465 -7765.0068 8487.9814 C-7764.6953 8488.0566 -7764.6255 8487.793 -7764.3662 8487.7383 C-7763.7422 8487.8926 -7763.5107 8487.8574 -7762.9224 8487.7813 C-7763.0684 8487.7559 L-7763.1328 8487.8457 -7763.1387 8488.0186 -7762.9922 8488.0449 C-7762.7725 8487.9307 -7762.1846 8488.1543 -7762.4033 8487.668 C-7761.7754 8487.9482 -7760.9385 8487.4395 -7760.3271 8487.8184 C-7760.3789 8487.6855 -7760.2246 8487.6602 -7760.1602 8487.5703 C-7759.6089 8487.5645 -7759.0293 8487.8359 -7758.5898 8487.6094 C-7758.5024 8487.6758 -7758.7295 8487.8359 -7758.5049 8487.8496 C-7758.3721 8487.7979 -7758.5024 8487.6758 -7758.3384 8487.6016 C-7757.4453 8487.3535 -7756.5303 8487.8574 -7755.7188 8487.793 C-7754.2754 8487.5361 -7752.7695 8487.666 -7751.3867 8487.623 C-7751.4023 8487.7207 L-7750.9395 8487.3477 -7750.3159 8488.1025 -7749.9463 8487.541 C-7749.8369 8487.6338 -7749.5283 8487.585 -7749.6094 8487.7734 C-7749.2407 8487.5098 -7748.5771 8488.0215 -7748.0439 8487.6865 C-7748.0928 8487.6777 -7748.1211 8487.6973 -7748.1777 8487.7393 C-7747.6392 8487.9551 -7747.1641 8487.6602 -7746.5957 8487.8555 C-7746.6533 8487.8975 -7746.7583 8487.9277 -7746.7754 8488.0254 C-7746.5557 8488.2129 -7746.2549 8487.6133 -7746.1348 8488.084 C-7746.0088 8488.0801 -7746.0449 8487.8477 -7746.1221 8487.8613 C-7744.8779 8488.0449 -7743.5498 8487.7441 -7742.2549 8487.6367 C-7741.3271 8487.918 -7742.1982 8488.4297 -7741.4663 8488.0781 C-7741.4063 8488.1689 -7741.4229 8487.8984 -7741.4131 8487.9961 C-7741.1299 8487.8643 -7740.9717 8488.5215 -7740.7754 8488.2754 C-7740.8564 8487.9863 -7740.6445 8488.1133 -7740.6387 8487.9375 C-7740.0713 8488.125 -7739.9575 8488.3857 -7739.5098 8488.166 C-7739.5435 8488.3184 L-7739.0186 8487.8887 -7738.4102 8488.1191 -7737.9673 8487.623 C-7735.0728 8487.5322 -7732.2983 8487.2578 -7729.4761 8487.2002 C-7726.6865 8487.2949 -7723.9551 8487.0723 -7721.1221 8487.3359 C-7720.4585 8487.7354 -7720.4087 8487.7246 -7719.6797 8487.5625 C-7719.7095 8487.627 -7719.7549 8487.6426 -7719.7061 8487.7031 C-7719.6699 8487.375 -7719.1929 8487.6719 -7719.1235 8487.3594 C-7718.0762 8487.4199 -7717.1113 8487.3301 -7716.0337 8487.3281 C-7716.2041 8487.3633 -7716.2896 8487.6309 -7716.0869 8487.6094 C-7715.8755 8487.3994 L-7715.8408 8487.4922 L-7715.7021 8487.4434 -7715.5513 8487.2813 -7715.6943 8487.1758 C-7712.9873 8486.8926 -7710.3242 8487.5498 -7707.6729 8487.4697 C-7707.0435 8487.6064 -7706.1475 8487.4814 -7705.4629 8487.4141 C-7703.4355 8487.8506 -7701.6079 8488.2041 -7699.5479 8487.8984 C-7699.8169 8488.7461 -7700.6675 8488.9414 Vf-7790.7578 8488.7422 m-7790.6855 8488.9063 -7790.4497 8488.9961 -7790.6377 8489.2139 C-7790.6611 8489.0605 -7790.7822 8488.8887 -7790.7578 8488.7422 Cf-7784.4619 8490.4297 m-7784.4536 8490.3809 -7784.3721 8490.4961 -7784.3521 8490.5225 C-7784.4297 8490.5352 -7784.5024 8490.6729 -7784.5645 8490.5879 C-7784.4854 8490.5762 -7784.4976 8490.498 -7784.4619 8490.4297 Cf-7782.8521 8490.5273 m-7782.8765 8490.6729 -7783.2207 8490.7891 -7783.4238 8490.8066 C-7782.8521 8490.5273 Lf-7781.3521 8491.1289 m-7781.2227 8491.252 -7781.2583 8491.3193 -7781.4326 8491.3154 C-7781.4453 8491.2383 -7781.3877 8491.1992 -7781.3521 8491.1289 Cf-7781.2456 8490.7969 m-7781.1211 8490.793 -7781.0591 8490.8789 -7780.9985 8490.9629 C-7781.0029 8490.8369 -7781.2871 8491.041 -7781.2456 8490.7969 Cf-7777.9893 8491.2207 m-7777.9111 8491.209 -7777.7417 8491.0879 -7777.6689 8491.25 C-7777.7505 8491.1367 -7778.0498 8491.4346 -7777.9893 8491.2207 Cf-7776.4761 8491 m-7776.4272 8491.0098 -7776.4072 8491.0361 -7776.3506 8490.9961 C-7776.2607 8491.0625 -7776.3555 8491.1689 -7776.4312 8491.1826 C-7776.4761 8491 Lf-7748.9287 8490.4141 m-7749.0923 8490.4863 L-7749.0684 8490.3418 L-7748.9287 8490.4141 Lf-7736.8574 8490.4063 m-7736.6943 8490.3145 -7736.7441 8490.543 -7736.7168 8490.5645 C-7736.8643 8490.5801 -7736.6621 8490.3848 -7736.8574 8490.4063 Cf-7730.3486 8489.6777 m-7730.3984 8489.6816 L-7730.3818 8489.3818 L-7730.3486 8489.6777 LfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 3)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7791.5 8489.5273 m-7577.5361 8489.5273 L-7577.5361 8438.7266 L-7791.5 8438.7266 L-7791.5 8489.5273 Lnu0 R0.742188 0.980469 0.007813 0.003906 K1 J 3 w-7775.3838 8473.0879 m-7775.3838 8480.4658 l-7758.9268 8487.2832 l-7758.9268 8478.8281 lS1 Ap0 O0.019531 0.992188 0.972656 0 k0 J-7783.1016 8462.9727 m-7783.1016 8467.2871 -7784.6455 8470.7842 -7786.5508 8470.7842 c-7788.4561 8470.7842 -7790 8467.2871 -7790 8462.9727 c-7790 8458.6582 -7788.4561 8455.1602 -7786.5508 8455.1602 c-7784.6455 8455.1602 -7783.1016 8458.6582 -7783.1016 8462.9727 cbu0 Ap0.144531 1 1 0.046875 k1 w-7782.1484 8461.7461 m-7785.5508 8461.752 L-7788.9541 8461.7617 L-7788.9814 8462.1582 -7789 8462.5605 -7789 8462.9727 c-7789 8462.9766 -7789 8462.9785 -7789 8462.9824 C-7785.5508 8463.709 L-7782.1631 8464.4209 L-7739.1699 8473.4727 L-7739.1699 8461.6445 L-7782.1484 8461.7461 Lf0.019531 0.992188 0.972656 0 k-7782.5439 8459.1504 m-7785.5508 8459.7969 L-7788.8213 8460.502 L-7788.8809 8460.9082 -7788.9248 8461.3301 -7788.9541 8461.7617 C-7785.5508 8461.752 L-7782.1484 8461.7461 L-7739.1699 8461.6445 L-7739.1699 8449.8047 L-7782.5439 8459.1504 Lf0.234375 1 1 0.179688 k-7782.1631 8464.4209 m-7785.5508 8463.709 L-7789 8462.9824 L-7788.9971 8467.293 -7787.4551 8470.7842 -7785.5508 8470.7842 c-7785.0303 8470.7842 -7784.5391 8470.5176 -7784.0967 8470.0488 C-7739.1699 8485.7168 L-7739.1699 8473.4727 L-7782.1631 8464.4209 Lf0.003906 0.816406 0.585938 0 k-7784.0547 8455.9414 m-7784.5078 8455.4453 -7785.0137 8455.1602 -7785.5508 8455.1602 c-7787.0742 8455.1602 -7788.3643 8457.3984 -7788.8213 8460.502 C-7785.5508 8459.7969 L-7782.5439 8459.1504 L-7739.1699 8449.8047 L-7739.1699 8440.2266 L-7784.0547 8455.9414 LfU1 Ap0.695313 0.671875 0.636719 0.738281 k0 R0.742188 0.980469 0.007813 0.003906 K3 w-7739.1699 8440.2266 m-7733.6235 8440.2266 -7729.1279 8450.4102 -7729.1279 8462.9727 c-7729.1279 8475.5352 -7733.6235 8485.7168 -7739.1699 8485.7168 c-7744.7158 8485.7168 -7749.2109 8475.5352 -7749.2109 8462.9727 c-7749.2109 8450.4102 -7744.7158 8440.2266 -7739.1699 8440.2266 cBu0 Ap0.664063 0 0.347656 0 k1 w-7577.6758 8443.9697 m-7614.0205 8453.5303 -7685.8193 8439.2686 -7722.4155 8439.8994 C-7724.4775 8440.0723 -7725.5117 8440.1914 -7727.5742 8440.501 c-7729.6367 8440.8096 -7730.6675 8440.998 -7732.7295 8441.458 c-7734.7925 8441.917 -7735.8223 8442.1846 -7737.8848 8442.8105 c-7738.2021 8442.9063 -7738.7109 8443.0723 -7739.3154 8443.2754 c-7740.5088 8443.6738 -7742.0908 8444.2207 -7743.4268 8444.6865 C-7745.9072 8448.2354 -7747.8555 8454.8018 -7747.8555 8463.0322 c-7747.8555 8471.7031 -7745.6973 8478.5488 -7743.0283 8481.9434 C-7741.9346 8481.6641 -7740.4951 8481.3887 -7739.3154 8481.1309 c-7738.7529 8481.0098 -7738.2515 8480.8906 -7737.8848 8480.7793 c-7735.8223 8480.1553 -7734.7925 8479.8857 -7732.7295 8479.4258 c-7730.6675 8478.9658 -7729.6367 8478.7793 -7727.5742 8478.4697 c-7725.5117 8478.1602 -7724.4775 8478.042 -7722.4155 8477.8682 C-7685.8193 8477.2354 -7614.0205 8491.5 -7577.6758 8481.9395 C-7586.0762 8477.3857 -7590.2754 8474.2617 -7598.6758 8467.1738 C-7591.1045 8459.8818 -7584.3809 8452.0498 -7577.6758 8443.9697 CfUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 5)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7791.5 8491.5 m-7567.7979 8491.5 L-7567.7979 8448.123 L-7791.5 8448.123 L-7791.5 8491.5 Lnu0 O0.742188 0.980469 0.007813 0.003906 k-7791.5 8491.5 m-7742.5986 8491.5 L-7749.1279 8488.708 L-7769.4326 8480.0273 L-7769.4326 8463.9482 L-7769.4326 8461.3193 L-7791.5 8461.3193 L-7788.9033 8463.9482 L-7775.9404 8477.0674 L-7788.7705 8488.708 L-7791.5 8491.5 Lf0.621094 0.847656 0 0 k-7769.4316 8448.123 m-7769.4316 8451.3506 L-7769.4316 8476.5449 L-7769.4316 8480.0273 L-7589.8662 8480.0273 L-7589.8662 8476.5449 L-7589.8662 8451.3506 L-7589.8662 8448.123 L-7769.4316 8448.123 Lf0.742188 0.980469 0.007813 0.003906 k-7583.3584 8477.0674 m-7570.3965 8463.9482 L-7567.7979 8461.3193 L-7589.8662 8461.3193 L-7589.8662 8463.9482 L-7589.8662 8480.0273 L-7610.1709 8488.708 L-7616.7002 8491.5 L-7567.7979 8491.5 L-7570.5283 8488.708 L-7583.3584 8477.0674 Lf-7742.5986 8491.5 m-7769.4326 8480.0273 LNu0 O0.847656 1 0.261719 0.160156 k-7597.0215 8480.0273 m-7616.7002 8480.0273 L-7616.7002 8488.4395 L-7616.7002 8491.5 L-7589.8662 8480.0273 L-7597.0215 8480.0273 Lf-7769.4326 8480.0273 m-7742.5986 8491.5 L-7742.5986 8488.4395 L-7742.5986 8480.0273 L-7762.2764 8480.0273 L-7769.4326 8480.0273 LfUUU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 2 pt. Oval/ Adobe Calligraphic) -( Brush Tool/ 5 pt. Oval/ Adobe Calligraphic Brush Tool/ 3 pt. ) -(Flat/ Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe Calligr) -(aphic Brush Tool/ 3 pt. Round/ Adobe Calligraphic Brush Tool/ ) -(7 pt. Round/ Adobe ArtOnPath Brush Tool/ Charcoal/ Adobe ArtOn) -(Path Brush Tool/ Pencil - Thin/ Adobe ArtOnPath Brush Tool/ Ba) -(nner 1/ Adobe ArtOnPath Brush Tool/ Banner 2/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(2 pt. Oval)(1 2 2 26 74 15 15 0 1 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(3 pt. Flat)(1 3 3 9 9 15 15 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(3 pt. Round)(1 3 3 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Oval)(1 5 5 10 90 -65 35 0 1 1 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(7 pt. Round)(1 7 7 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Banner 1)(1 / Unnamed Brush Pat 5/ / / / / 5 0.47451 0.278431 0.623529 /) -(  1 0 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Banner 2)(1 / Unnamed Brush Pat 3/ / / / / 5 0.25098 0.74902 0.713726 / ) -( 1 0 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Charcoal)(1 / Unnamed Brush Pat 2/ / / / / 0 1 /  1 1 1.2 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Pencil - Thin)(1 / Unnamed 18/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 k(White)Pc0.746094 0.675781 0.667969 0.898438 k(Black)Pc0 0.988281 1 0 k(RGB Red)Pc0.0625 0 0.960938 0 k(RGB Yellow)Pc0.625 0 1 0 k(RGB Green)Pc0.515625 0 0.125 0 k(RGB Cyan)Pc0.878906 0.765625 0 0 k(RGB Blue)Pc0.269531 0.8125 0 0 k(RGB Magenta)Pc0.167969 0.976563 0.921875 0.066406 k(R=193 G=39 B=45)Pc0.003906 0.988281 0.96875 0 k(R=237 G=28 B=36)Pc0 0.792969 0.964844 0 k(R=241 G=90 B=36)Pc0 0.5 0.980469 0 k(R=247 G=147 B=30)Pc0 0.347656 0.867188 0 k(R=251 G=176 B=59)Pc0.046875 0 0.929688 0 k(R=252 G=238 B=33)Pc0.1875 0 0.976563 0 k(R=217 G=224 B=33)Pc0.5 0 0.988281 0 k(R=140 G=198 B=63)Pc0.742188 0 0.992188 0 k(R=57 G=181 B=74)Pc0.859375 0.175781 1 0.039063 k(R=0 G=146 B=69)Pc0.898438 0.332031 0.984375 0.257813 k(R=0 G=104 B=55)Pc0.757813 0 0.746094 0 k(R=34 G=181 B=115)Pc0.78125 0.089844 0.457031 0 k(R=0 G=169 B=157)Pc0.695313 0.148438 0 0 k(R=41 G=171 B=226)Pc0.871094 0.523438 0 0 k(R=0 G=113 B=188)Pc0.988281 0.960938 0.035156 0.003906 k(R=46 G=49 B=146)Pc1 1 0.261719 0.246094 k(R=27 G=20 B=100)Pc0.742188 0.980469 0.007813 0.003906 k(R=102 G=45 B=145)Pc0.492188 0.988281 0.011719 0 k(R=147 G=39 B=143)Pc0.347656 1 0.371094 0.109375 k(R=158 G=0 B=93)Pc0.117188 1 0.492188 0.007813 k(R=212 G=20 B=90)Pc0 0.964844 0.203125 0 k(R=237 G=30 B=121)Pc0.226563 0.273438 0.398438 0 k(R=199 G=178 B=153)Pc0.398438 0.425781 0.523438 0.066406 k(R=153 G=134 B=117)Pc0.503906 0.527344 0.605469 0.234375 k(R=115 G=99 B=87)Pc0.574219 0.601563 0.636719 0.417969 k(R=83 G=71 B=65)Pc0.226563 0.382813 0.632813 0.011719 k(R=198 G=156 B=109)Pc0.316406 0.488281 0.738281 0.097656 k(R=166 G=124 B=82)Pc0.359375 0.570313 0.835938 0.226563 k(R=140 G=98 B=57)Pc0.390625 0.636719 0.929688 0.355469 k(R=117 G=76 B=36)Pc0.414063 0.695313 0.964844 0.488281 k(R=96 G=56 B=19)Pc0.476563 0.730469 0.832031 0.679688 k(R=66 G=33 B=11)PcBb2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 1)PcBb0 0 0 0 Bh2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 1)PcBb2 (Red Linear Gradient) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Red Linear Gradient)PcBb2 (Gray Linear Gradient) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Gray Linear Gradient)PcBb0 0 0 0 Bh2 (Purple Radial Gradient) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Purple Radial Gradient)Pc(Checked Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Checked Pattern)Pc0.007813 0.988281 0.96875 0 k(R=236 G=28 B=36)Pc0.78125 0.089844 0.457031 0 k(R=0 G=169 B=157)Pc0.742188 0.980469 0.007813 0.003906 k(R=102 G=45 B=145)Pc0.484375 0.363281 0.335938 0.015625 k(R=139 G=146 B=152 1)Pc0 g(K=100)Pc0.1 g(K=90)Pc0.2 g(K=80)Pc0.3 g(K=70)Pc0.4 g(K=60)Pc0.5 g(K=50)Pc0.6 g(K=40)Pc0.7 g(K=30)Pc0.8 g(K=20)Pc0.9 g(K=10)Pc0.95 g(K=5)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Au*u0 O0 0.91 0.72 0.23 k0 J 0 j 1 w 4 M []0 d0 XR-27.061 368.9834 m-27.061 346.3057 L-30.6328 346.3057 L-30.6328 368.9834 L-27.061 368.9834 Lf*UU*u0 0 0 1 k11.2681 360.0498 m10.3423 360.0498 L10.2163 360.0498 10.1138 360.1572 10.1138 360.29 c10.1138 368.7549 L10.1138 368.8809 10.21 368.9834 10.3423 368.9834 c11.2681 368.9834 L11.394 368.9834 11.4966 368.8867 11.4966 368.7549 c11.4966 360.29 l11.4966 360.1631 11.4004 360.0498 11.2681 360.0498 cf1 D21.9644 360.2959 m21.9644 360.1689 22.0781 360.0498 22.2104 360.0498 C23.0522 360.0498 l23.1782 360.0498 23.2866 360.1689 23.2866 360.2959 C23.2866 365.7061 L24.4951 365.7061 l24.6274 365.7061 24.7295 365.7959 24.7295 365.9229 C24.7295 366.5186 l24.7295 366.6445 24.6274 366.7471 24.4951 366.7471 C23.2866 366.7471 L23.2866 367.4736 l23.2866 368.0986 23.437 368.249 24.0083 368.249 C24.5674 368.249 l24.6758 368.249 24.7656 368.3037 24.7656 368.4424 c24.7656 368.9951 l24.7656 369.1025 24.6582 369.1592 24.5435 369.1875 c24.3521 369.2334 24.1528 369.2715 23.8457 369.2715 c22.6914 369.2715 21.9644 368.8926 21.9644 367.4736 C21.9644 366.7471 L20.603 366.7471 l20.4712 366.7471 20.3687 366.6504 20.3687 366.5186 C20.3687 366.4219 l20.3687 366.29 20.4712 366.1895 20.603 366.1426 C21.9644 365.7324 L21.9644 360.2959 Lf/BBAccumShear (347.611328 -180.000000) XT0 D29.9365 362.9229 m29.9365 361.8105 29.4614 361.1074 28.4814 361.1074 c27.4956 361.1074 27.0327 361.8174 27.0327 362.9229 C27.0327 363.8662 l27.0327 364.9795 27.502 365.6826 28.4814 365.6826 c29.4673 365.6826 29.9365 364.9736 29.9365 363.8662 c29.9365 362.9229 Lf1 D31.2593 362.9229 m31.2593 363.8662 l31.2593 365.6104 30.3096 366.8311 28.4814 366.8311 c26.6543 366.8311 25.71 365.6104 25.71 363.8662 C25.71 362.9229 l25.71 361.1797 26.6543 359.959 28.4814 359.959 c30.3096 359.959 31.2593 361.1797 31.2593 362.9229 cf56.479 361.7207 m56.479 360.2529 57.02 359.959 58.2524 359.959 c58.499 359.959 58.7876 359.9893 59.0518 360.0313 c59.208 360.0557 59.2744 360.1279 59.2744 360.2412 c59.2744 360.8311 l59.2744 360.9512 59.1841 361.0049 59.022 361.0049 C58.3667 361.0049 l57.9097 361.0049 57.8076 361.0889 57.8076 361.7207 C57.8076 365.7061 L58.998 365.7061 l59.1304 365.7061 59.2383 365.8145 59.2383 365.9463 C59.2383 366.5059 l59.2383 366.6377 59.1304 366.7471 58.998 366.7471 C57.8076 366.7471 L57.8076 368.0205 l57.8076 368.1563 57.6948 368.2324 57.5791 368.2139 C56.7075 368.0693 L56.5708 368.0459 56.479 367.9453 56.479 367.8291 C56.479 366.7471 L55.2026 366.7471 l55.0708 366.7471 54.9683 366.6504 54.9683 366.5186 C54.9683 366.4219 l54.9683 366.29 55.0708 366.1895 55.2026 366.1426 C56.479 365.7686 L56.479 361.7207 Lf/BBAccumShear (347.611328 -180.000000) XT32.1519 366.7471 m32.02 366.7471 31.9175 366.6377 31.9175 366.5059 C31.9175 366.5596 31.9175 366.4287 v31.9175 366.2969 32.0063 366.1865 32.1519 366.1436 C33.3589 365.7783 L33.3589 360.2959 L33.3589 360.1631 33.4673 360.0498 33.5933 360.0498 C34.4409 360.0498 l34.5732 360.0498 34.6812 360.1689 34.6812 360.2959 C34.6812 365.2314 l35.2344 365.5439 35.7393 365.7002 36.3403 365.7002 c36.4907 365.7002 36.5869 365.79 36.5869 365.9229 c36.5869 366.6025 l36.5869 366.7412 36.4907 366.8311 36.3403 366.8311 c35.8296 366.8311 35.252 366.7061 34.5767 366.2139 C34.5664 366.5059 l34.562 366.6377 34.4556 366.7471 34.3237 366.7471 C32.1519 366.7471 Lf/BBAccumShear (343.902222 0.000000) XT14.1025 360.2959 m14.1025 360.1631 14.2109 360.0498 14.3369 360.0498 C15.1851 360.0498 l15.3174 360.0498 15.4253 360.1689 15.4253 360.2959 C15.4253 365.249 l15.9546 365.5205 16.4595 365.7002 16.9165 365.7002 c17.8364 365.7002 18.0889 365.3643 18.0889 364.2334 C18.0889 360.2959 l18.0889 360.1631 18.1973 360.0498 18.3291 360.0498 C19.1709 360.0498 l19.3032 360.0498 19.4111 360.1631 19.4111 360.2959 c19.4111 364.376 l19.4111 365.7109 18.9502 366.8311 17.3252 366.8311 c16.5737 366.8311 16.0698 366.6768 15.3389 366.2256 C15.3291 366.5059 l15.3242 366.6377 15.2183 366.7471 15.0859 366.7471 C12.853 366.7471 l12.7207 366.7471 12.6187 366.6377 12.6187 366.5059 C12.6187 366.5596 12.6187 366.4287 v12.6187 366.2969 12.7075 366.1865 12.853 366.1436 C14.1025 365.7783 L14.1025 360.2959 Lf/BBAccumShear (343.902222 0.000000) XT0 D52.3223 361.4326 m51.8589 361.1797 51.3901 361.0225 50.8975 361.0225 c50.248 361.0225 49.9111 361.2158 49.9111 361.9424 C49.9111 362.0391 l49.9111 362.8027 50.2241 363.1396 51.4985 363.1396 C52.3223 363.1396 l52.3223 361.4326 Lf1 D53.6445 361.0088 m53.6445 364.5518 L53.6445 366.0313 52.8394 366.8311 51.1499 366.8311 c50.3262 366.8311 49.7012 366.7471 49.2139 366.6563 c49.0518 366.626 48.9731 366.5479 48.9731 366.416 C48.9731 365.8203 l48.9731 365.6582 49.083 365.6152 49.1968 365.624 C49.2568 365.6279 L49.6968 365.6592 50.374 365.7188 51.1499 365.7188 c51.9736 365.7188 52.3223 365.4482 52.3223 364.5518 C52.3223 364.0469 L51.4985 364.0469 l49.3823 364.0469 48.5825 363.3682 48.5825 362.0332 C48.5825 361.9365 l48.5825 360.374 49.5923 359.959 50.6025 359.959 c51.228 359.959 51.8921 360.2148 52.4331 360.5576 C52.4424 360.29 l52.4468 360.1572 52.5591 360.0498 52.6914 360.0498 C54.7236 360.0498 l54.856 360.0498 54.9644 360.1572 54.9644 360.29 c54.9644 360.2178 54.9644 360.3486 v54.9644 360.4873 54.8589 360.6172 54.7236 360.6611 C53.6445 361.0088 Lf/BBAccumRotation (0.026797) XT/BBAccumShear (343.902222 0.000000) XT63.0132 367.9668 m63.0132 368.9775 l63.0132 369.1094 62.9048 369.2178 62.7725 369.2178 C61.8828 369.2178 l61.7505 369.2178 61.6362 369.1094 61.6362 368.9775 C61.6362 367.9668 l61.6362 367.835 61.7505 367.7266 61.8828 367.7266 C62.7725 367.7266 l62.9048 367.7266 63.0132 367.835 63.0132 367.9668 cf0 D61.6606 365.7783 m60.4048 366.1436 L60.2588 366.1865 60.1704 366.2969 60.1704 366.4287 c60.1704 366.5596 60.1704 366.5059 Y60.1704 366.6377 60.2725 366.7471 60.4048 366.7471 c62.7427 366.7471 L62.8745 366.7471 62.9829 366.6377 62.9829 366.5059 c62.9829 360.2959 l62.9829 360.1631 62.8745 360.0498 62.7427 360.0498 c61.9009 360.0498 L61.7686 360.0498 61.6606 360.1631 61.6606 360.2959 C61.6606 365.7783 Lf/BBAccumShear (341.902222 0.000000) XT1 D69.0288 361.1738 m68.5269 361.1367 68.2051 361.0947 67.5195 361.0947 c66.75 361.0947 66.1909 361.582 66.1909 362.8809 C66.1909 363.9092 l66.1909 365.2139 66.7563 365.6943 67.5195 365.6943 c68.2051 365.6943 68.5254 365.6377 69.0337 365.6133 C69.0757 365.6113 L69.1899 365.6064 69.2935 365.6709 69.2935 365.79 C69.2935 366.3975 l69.2935 366.5781 69.2451 366.6445 69.0469 366.6865 c68.71 366.7588 68.1631 366.8311 67.5195 366.8311 c65.9146 366.8311 64.8687 365.7725 64.8687 363.9092 C64.8687 362.8809 l64.8687 361.0166 65.9204 359.959 67.5195 359.959 c68.1689 359.959 68.71 360.0313 69.0469 360.1035 c69.2451 360.1455 69.2935 360.2178 69.2935 360.3916 c69.2935 360.999 l69.2935 361.1191 69.1846 361.1855 69.0708 361.1768 C69.0288 361.1738 Lf71.0679 361.1846 m70.9478 361.1904 70.8477 361.1016 70.8477 360.999 C70.8477 360.4277 l70.8477 360.29 70.9385 360.2061 71.0884 360.1689 c71.7207 360.0127 72.6572 359.959 73.1147 359.959 c74.5752 359.959 75.417 360.6318 75.417 361.7686 c75.417 362.4297 75.1826 362.9893 74.1787 363.5908 C72.7959 364.4258 l72.3687 364.6787 72.1401 364.8525 72.1401 365.1289 c72.1401 365.6221 72.4888 365.7305 73.1147 365.7305 c73.7935 365.7305 74.6577 365.6318 75.0381 365.6104 c75.0503 365.6094 75.062 365.6104 75.0806 365.6104 c75.2007 365.6104 75.2783 365.6826 75.2783 365.8271 C75.2783 366.374 l75.2783 366.5127 75.2065 366.6025 75.0562 366.6318 c74.4673 366.748 73.8716 366.8311 73.0483 366.8311 c71.6655 366.8311 70.8179 366.3555 70.8179 365.1289 c70.8179 364.4014 71.2744 363.8428 71.936 363.4404 C73.3667 362.5742 l73.9019 362.249 74.0825 362.0635 74.0825 361.7686 c74.0825 361.2822 73.8237 361.0537 73.0605 361.0537 c72.6636 361.0537 71.6968 361.1533 71.1157 361.1816 C71.0679 361.1846 Lf38.5928 360.2959 m38.5928 360.1631 38.689 360.0498 38.8154 360.0498 C39.687 360.0498 l39.8193 360.0498 39.9155 360.1689 39.9155 360.2959 C39.9155 365.2617 l40.4141 365.5205 40.8594 365.6943 41.2017 365.6943 c41.8511 365.6943 42.0796 365.4658 42.0796 364.4795 C42.0796 360.2959 l42.0796 360.1631 42.1758 360.0498 42.3022 360.0498 C43.1738 360.0498 l43.3062 360.0498 43.4023 360.1689 43.4023 360.2959 C43.4023 364.4795 l43.4023 364.8105 43.3784 365.1172 43.3242 365.3818 C43.7749 365.5859 44.2559 365.6943 44.5864 365.6943 c45.2358 365.6943 45.5664 365.4365 45.5664 364.4678 C45.5664 360.2959 l45.5664 360.1631 45.6748 360.0498 45.8071 360.0498 C46.6489 360.0498 l46.7813 360.0498 46.8892 360.1631 46.8892 360.2959 c46.8892 364.6104 l46.8892 366.1494 46.1245 366.8369 44.9175 366.8369 c44.1899 366.8369 43.5645 366.6445 42.9272 366.3193 C42.6392 366.6621 42.2241 366.8369 41.623 366.8369 c40.9375 366.8369 40.377 366.5811 39.8286 366.2256 C39.8188 366.5059 l39.814 366.6377 39.708 366.7471 39.5757 366.7471 C37.436 366.7471 l37.3164 366.7471 37.2241 366.6377 37.2241 366.5059 C37.2241 366.5596 37.2241 366.4287 v37.2241 366.2969 37.3042 366.1865 37.436 366.1436 C38.5928 365.7783 L38.5928 360.2959 Lf/BBAccumShear (343.902222 0.000000) XT0 D-3.6001 367.8164 m-5.82422 367.8164 L-5.82422 360.2891 L-5.82422 360.1631 -5.92041 360.0488 -6.05273 360.0488 c-6.97852 360.0488 L-7.10498 360.0488 -7.20703 360.1572 -7.20703 360.2891 c-7.20703 367.8164 L-9.43164 367.8164 L-9.56348 367.8164 -9.67188 367.8887 -9.67188 368.0205 c-9.67188 368.7607 L-9.67188 368.8867 -9.56348 368.9834 -9.43164 368.9834 c-3.6001 368.9834 L-3.46729 368.9834 -3.36523 368.8926 -3.36523 368.7607 c-3.36523 368.0205 l-3.36523 367.8945 -3.46729 367.8164 -3.6001 367.8164 cf0.959473 359.958 m-0.982422 359.958 -2.2334 360.8965 -2.2334 363.3252 c-2.2334 368.7539 L-2.2334 368.8809 -2.13086 368.9834 -1.99854 368.9834 c-1.07861 368.9834 L-0.952637 368.9834 -0.844238 368.8867 -0.844238 368.7539 c-0.844238 363.3252 L-0.844238 361.8643 -0.435547 361.1191 0.959473 361.1191 c2.354 361.1191 2.7627 361.8584 2.7627 363.3252 c2.7627 368.7539 L2.7627 368.8809 2.86475 368.9834 2.99707 368.9834 c3.91699 368.9834 L4.04346 368.9834 4.15137 368.8867 4.15137 368.7539 c4.15137 363.3252 l4.15137 360.8965 2.90088 359.958 0.959473 359.958 cf1 D-11.7637 365.0225 m-11.7637 366.1826 -11.9165 366.8994 -12.4316 367.376 c-12.8496 367.7627 -13.4336 367.9004 -14.0962 367.9004 c-14.6011 367.9004 -14.9443 367.8828 -15.2686 367.8643 c-15.2686 361.1611 L-14.9502 361.1436 -14.6011 361.1318 -14.0962 361.1318 c-13.4067 361.1318 -12.8022 361.2813 -12.3813 361.7061 C-11.897 362.1963 -11.7637 362.8838 -11.7637 364.0088 C-11.7637 365.0225 lf0 D-11.3271 360.874 m-11.9658 360.2441 -12.9282 359.958 -14.0962 359.958 c-14.98 359.958 -16.02 360.0313 -16.375 360.0908 c-16.5552 360.1211 -16.6577 360.2178 -16.6577 360.4277 c-16.6577 368.6045 L-16.6577 368.8076 -16.5552 368.9111 -16.375 368.9404 c-16.02 369.001 -14.98 369.0732 -14.0962 369.0732 c-12.939 369.0732 -11.9834 368.7959 -11.3452 368.1797 c-10.5864 367.4463 -10.3872 366.4404 -10.3872 365.0791 c-10.3872 363.9521 l-10.3872 362.6064 -10.5791 361.6113 -11.3271 360.874 cf*U*u0 0 0 0.56 k64.7358 346.3057 m64.0742 346.3057 L63.9536 346.3057 63.8579 346.4131 63.8579 346.5459 c63.8579 355.0117 L63.8579 355.1318 63.9419 355.2402 64.0742 355.2402 c64.7358 355.2402 L64.856 355.2402 64.9521 355.1436 64.9521 355.0117 c64.9521 346.5459 l64.9521 346.4258 64.8677 346.3057 64.7358 346.3057 cf71.6499 346.3057 m71.0728 346.3057 L70.9404 346.3057 70.8325 346.4131 70.8325 346.5459 c70.8325 350.502 L70.8325 351.7168 70.4233 352.0889 69.5098 352.0889 c69.0044 352.0889 68.4395 351.8975 67.8862 351.6201 c67.8862 346.5459 L67.8862 346.4258 67.7778 346.3057 67.6455 346.3057 c67.0566 346.3057 L66.936 346.3057 66.8276 346.4131 66.8276 346.5459 c66.8276 352.6787 L66.8276 352.8115 66.9243 352.9189 67.0566 352.9189 c67.6577 352.9189 L67.79 352.9189 67.8862 352.8115 67.8862 352.6787 c67.8862 352.4502 L68.5474 352.8232 69.0889 353.0029 69.7979 353.0029 c71.2412 353.0029 71.8906 352.1016 71.8906 350.502 c71.8906 346.5459 l71.8906 346.4131 71.7822 346.3057 71.6499 346.3057 cf76.7729 354.6143 m76.1958 354.6143 L75.6304 354.6143 75.4619 354.4463 75.4619 353.7852 c75.4619 352.9189 L76.7246 352.9189 L76.8569 352.9189 76.9531 352.8232 76.9531 352.7021 c76.9531 352.2334 L76.9531 352.1133 76.8569 352.0293 76.7246 352.0293 c75.4619 352.0293 L75.4619 346.5459 L75.4619 346.4258 75.354 346.3057 75.2339 346.3057 c74.6445 346.3057 L74.5122 346.3057 74.4038 346.4258 74.4038 346.5459 c74.4038 352.0293 L73.2373 352.1611 L73.105 352.1738 73.0088 352.2578 73.0088 352.3779 c73.0088 352.7021 L73.0088 352.8232 73.105 352.9189 73.2373 352.9189 c74.4038 352.9189 L74.4038 353.7852 L74.4038 355.0723 75.0293 355.4561 76.0874 355.4561 c76.4121 355.4561 76.6045 355.4209 76.7607 355.3848 c76.8931 355.3486 76.9893 355.2998 76.9893 355.1924 c76.9893 354.7959 l76.9893 354.6631 76.9053 354.6143 76.7729 354.6143 cf80.561 346.2217 m78.7935 346.2217 77.8911 347.3877 77.8911 349.1553 c77.8911 350.0693 L77.8911 351.8369 78.7935 353.0029 80.561 353.0029 c82.3286 353.0029 83.2427 351.8369 83.2427 350.0693 c83.2427 349.1553 l83.2427 347.3877 82.3286 346.2217 80.561 346.2217 cf1 D82.1841 350.0693 m82.1841 351.2959 81.6909 352.0771 80.561 352.0771 c79.4429 352.0771 78.9492 351.3076 78.9492 350.0693 c78.9492 349.1553 L78.9492 347.9287 79.4302 347.1475 80.561 347.1475 c81.6792 347.1475 82.1841 347.917 82.1841 349.1553 C82.1841 350.0693 lf0 D87.3794 352.0889 m86.8257 352.0889 86.3208 351.9453 85.7202 351.585 c85.7202 346.5459 L85.7202 346.4258 85.6108 346.3057 85.479 346.3057 c84.8901 346.3057 L84.769 346.3057 84.6616 346.4131 84.6616 346.5459 c84.6616 352.6787 L84.6616 352.8115 84.7573 352.9189 84.8901 352.9189 c85.4546 352.9189 L85.5874 352.9189 85.6831 352.8115 85.6831 352.6787 c85.6831 352.4268 L86.2847 352.8467 86.8374 353.0029 87.3794 353.0029 c87.5483 353.0029 87.6323 352.9316 87.6323 352.7871 c87.6323 352.2939 l87.6323 352.1611 87.5483 352.0889 87.3794 352.0889 cf96.4937 346.3057 m95.9175 346.3057 L95.7847 346.3057 95.6772 346.4131 95.6772 346.5459 c95.6772 350.8027 L95.6772 351.8135 95.2075 352.0889 94.5825 352.0889 c94.1499 352.0889 93.644 351.9453 93.1753 351.7646 c93.2476 351.5 93.2837 351.1875 93.2837 350.8271 c93.2837 346.5459 L93.2837 346.4258 93.1997 346.3057 93.0679 346.3057 c92.4292 346.3057 L92.3101 346.3057 92.2261 346.4131 92.2261 346.5459 c92.2261 350.8271 L92.2261 351.873 91.9253 352.0889 91.2993 352.0889 c90.8667 352.0889 90.3374 351.873 89.8325 351.6201 c89.8325 346.5459 L89.8325 346.4258 89.7476 346.3057 89.6157 346.3057 c88.978 346.3057 L88.8589 346.3057 88.7739 346.4131 88.7739 346.5459 c88.7739 352.6787 L88.7739 352.8115 88.8706 352.9189 89.0024 352.9189 c89.604 352.9189 L89.7358 352.9189 89.8325 352.8115 89.8325 352.6787 c89.8325 352.4502 L90.314 352.751 90.9272 353.0156 91.5884 353.0156 c92.105 353.0156 92.4897 352.8711 92.7905 352.5225 c93.4526 352.835 94.1616 353.0156 94.7866 353.0156 c95.8687 353.0156 96.7349 352.4736 96.7349 350.8027 c96.7349 346.5459 l96.7349 346.4131 96.6265 346.3057 96.4937 346.3057 cf102.7358 346.3057 m102.1821 346.3057 L102.0503 346.3057 101.9419 346.4131 101.9419 346.5459 c101.9419 346.8105 L101.3647 346.4736 100.7632 346.2217 100.0894 346.2217 c99.0679 346.2217 98.1304 346.666 98.1304 348.1689 c98.1304 348.3135 L98.1304 349.6123 98.8872 350.2617 101.0278 350.2617 c101.9175 350.2617 L101.9175 350.7432 L101.9175 351.7529 101.5688 352.1016 100.6304 352.1016 c99.8491 352.1016 99.272 352.0537 98.7905 352.0049 c98.7671 352.0049 98.7554 352.0049 98.731 352.0049 c98.6226 352.0049 98.5151 352.042 98.5151 352.1982 c98.5151 352.6182 L98.5151 352.751 98.5991 352.8232 98.7671 352.8467 c99.2603 352.9316 99.814 353.0029 100.6304 353.0029 c102.3022 353.0029 102.9761 352.1611 102.9761 350.7432 c102.9761 346.5459 l102.9761 346.4131 102.8677 346.3057 102.7358 346.3057 cf1 D101.9175 349.5039 m101.0278 349.5039 L99.5728 349.5039 99.188 349.1787 99.188 348.3252 c99.188 348.1816 L99.188 347.3154 99.5972 347.0869 100.2944 347.0869 c100.8472 347.0869 101.3413 347.2549 101.9175 347.5674 C101.9175 349.5039 lf0 D107.9058 346.2813 m107.6655 346.2451 107.353 346.2217 107.1245 346.2217 c106.019 346.2217 105.4897 346.5098 105.4897 347.833 c105.4897 352.0293 L104.3228 352.1611 L104.1909 352.1738 104.0942 352.2461 104.0942 352.3779 c104.0942 352.7021 L104.0942 352.835 104.1909 352.9189 104.3228 352.9189 c105.4897 352.9189 L105.4897 354.0977 L105.4897 354.2178 105.5737 354.3145 105.7056 354.3389 c106.3315 354.4346 L106.3433 354.4346 106.355 354.4346 106.3667 354.4346 c106.4634 354.4346 106.5474 354.3506 106.5474 354.2295 c106.5474 352.9189 L107.8462 352.9189 L107.978 352.9189 108.0874 352.8115 108.0874 352.6787 c108.0874 352.2705 L108.0874 352.1377 107.978 352.0293 107.8462 352.0293 c106.5474 352.0293 L106.5474 347.833 L106.5474 347.1709 106.7163 347.0752 107.1968 347.0752 c107.8706 347.0752 L108.0386 347.0752 108.1226 347.0264 108.1226 346.9072 c108.1226 346.4854 l108.1226 346.3779 108.063 346.3057 107.9058 346.2813 cf110.2153 353.9775 m109.6021 353.9775 L109.4702 353.9775 109.3608 354.0859 109.3608 354.2178 c109.3608 355.1807 L109.3608 355.3125 109.4702 355.4209 109.6021 355.4209 c110.2153 355.4209 L110.3472 355.4209 110.4556 355.3125 110.4556 355.1807 c110.4556 354.2178 l110.4556 354.0859 110.3472 353.9775 110.2153 353.9775 cf110.1909 346.3057 m109.6138 346.3057 L109.4819 346.3057 109.3735 346.4131 109.3735 346.5459 c109.3735 352.6787 L109.3735 352.8115 109.4819 352.9189 109.6138 352.9189 c110.1909 352.9189 L110.3237 352.9189 110.4312 352.8115 110.4312 352.6787 c110.4312 346.5459 l110.4312 346.4131 110.3237 346.3057 110.1909 346.3057 cf116.0591 346.3535 m115.6626 346.2813 115.1216 346.2217 114.5562 346.2217 c112.9214 346.2217 111.9956 347.376 111.9956 349.1436 c111.9956 350.0811 L111.9956 351.8486 112.9087 353.0029 114.5562 353.0029 c115.1089 353.0029 115.6626 352.9434 116.0591 352.8711 c116.2515 352.835 116.3003 352.7744 116.3003 352.6064 c116.3003 352.1738 L116.3003 352.0537 116.2036 351.9932 116.0952 351.9932 c116.0718 351.9932 116.0591 351.9932 116.0474 351.9932 c115.519 352.0537 115.146 352.0771 114.5562 352.0771 c113.5942 352.0771 113.0532 351.4404 113.0532 350.0811 c113.0532 349.1436 L113.0532 347.7959 113.5825 347.1475 114.5562 347.1475 c115.146 347.1475 115.519 347.1709 116.0474 347.2314 c116.0591 347.2314 116.0718 347.2314 116.0952 347.2314 c116.2036 347.2314 116.3003 347.1709 116.3003 347.0508 c116.3003 346.6182 l116.3003 346.4619 116.2515 346.3896 116.0591 346.3535 cf119.5835 346.2217 m119.1382 346.2217 118.272 346.2568 117.6831 346.4014 c117.5269 346.4375 117.4302 346.5098 117.4302 346.6416 c117.4302 347.0625 L117.4302 347.1709 117.5269 347.2432 117.647 347.2432 c117.6714 347.2432 117.6831 347.2432 117.6948 347.2432 c118.272 347.1709 119.1499 347.1113 119.5835 347.1113 c120.3647 347.1113 120.7729 347.3154 120.7729 347.9648 c120.7729 348.3252 120.5571 348.5537 119.8716 348.9629 c118.6567 349.6846 L117.9233 350.1299 117.4302 350.6465 117.4302 351.4043 c117.4302 352.6553 118.3687 353.0029 119.6069 353.0029 c120.2808 353.0029 120.9175 352.9434 121.4829 352.8467 c121.6392 352.8232 121.7114 352.7393 121.7114 352.6064 c121.7114 352.21 L121.7114 352.0654 121.6265 352.0049 121.5073 352.0049 c121.4956 352.0049 121.4829 352.0049 121.4702 352.0049 c121.0503 352.042 120.2808 352.1016 119.6069 352.1016 c118.9331 352.1016 118.4888 352.0176 118.4888 351.4043 c118.4888 351.043 118.7651 350.8154 119.3179 350.4902 c120.5093 349.7803 L121.5073 349.1914 121.8315 348.6748 121.8315 347.9648 c121.8315 346.7383 120.9292 346.2217 119.5835 346.2217 cf130.748 346.3047 m130.1953 346.3047 L130.0625 346.3047 129.9551 346.4121 129.9551 346.5449 c129.9551 346.8096 L129.377 346.4727 128.7764 346.2207 128.1035 346.2207 c127.0811 346.2207 126.1426 346.665 126.1426 348.168 c126.1426 348.3125 L126.1426 349.6113 126.9004 350.2607 129.041 350.2607 c129.9307 350.2607 L129.9307 350.7422 L129.9307 351.752 129.582 352.1006 128.6445 352.1006 c127.8623 352.1006 127.2852 352.0527 126.8047 352.0039 c126.7793 352.0039 126.7676 352.0039 126.7441 352.0039 c126.6357 352.0039 126.5273 352.041 126.5273 352.1973 c126.5273 352.6172 L126.5273 352.75 126.6113 352.8223 126.7793 352.8457 c127.2734 352.9307 127.8262 353.002 128.6445 353.002 c130.3154 353.002 130.9893 352.1602 130.9893 350.7422 c130.9893 346.5449 l130.9893 346.4121 130.8809 346.3047 130.748 346.3047 cf1 D129.9307 349.5029 m129.041 349.5029 L127.5859 349.5029 127.2012 349.1777 127.2012 348.3242 c127.2012 348.1807 L127.2012 347.3145 127.6094 347.0859 128.3076 347.0859 c128.8604 347.0859 129.3535 347.2539 129.9307 347.5664 C129.9307 349.5029 lf0 D137.4473 346.3047 m136.8691 346.3047 L136.7373 346.3047 136.6289 346.4121 136.6289 346.5449 c136.6289 350.501 L136.6289 351.7158 136.2207 352.0879 135.3066 352.0879 c134.8008 352.0879 134.2363 351.8965 133.6826 351.6191 c133.6826 346.5449 L133.6826 346.4248 133.5742 346.3047 133.4424 346.3047 c132.8535 346.3047 L132.7324 346.3047 132.625 346.4121 132.625 346.5449 c132.625 352.6777 L132.625 352.8105 132.7207 352.918 132.8535 352.918 c133.4541 352.918 L133.5859 352.918 133.6826 352.8105 133.6826 352.6777 c133.6826 352.4492 L134.3438 352.8223 134.8848 353.002 135.5947 353.002 c137.0371 353.002 137.6875 352.1006 137.6875 350.501 c137.6875 346.5449 l137.6875 346.4121 137.5791 346.3047 137.4473 346.3047 cf143.9404 346.4248 m143.1953 346.2803 142.4609 346.2207 141.7275 346.2207 c139.9355 346.2207 139.1055 347.3867 139.1055 349.1904 c139.1055 350.0566 L139.1055 351.9443 139.9717 353.002 141.7275 353.002 c142.1006 353.002 142.666 352.9668 143.1348 352.8818 c143.1348 355.1191 L143.1348 355.2393 143.2305 355.3477 143.3633 355.3477 c143.9766 355.3477 L144.0967 355.3477 144.1934 355.251 144.1934 355.1191 c144.1934 346.7012 l144.1934 346.5449 144.1563 346.4609 143.9404 346.4248 cf1 D143.1348 351.9922 m142.7383 352.0645 142.1123 352.0762 141.7275 352.0762 c140.5488 352.0762 140.1641 351.3438 140.1641 350.0566 c140.1641 349.1904 L140.1641 347.8799 140.5371 347.1465 141.7275 347.1465 c142.1367 347.1465 142.7256 347.1816 143.1348 347.2188 C143.1348 351.9922 lf0 D156.3057 346.3047 m155.7168 346.3047 L155.584 346.3047 155.4766 346.4121 155.4766 346.5449 c155.4766 353.6758 L155.4766 353.7002 155.4766 353.7119 155.4639 353.7119 c155.4521 353.7119 155.4521 353.7119 155.4395 353.6875 c153.7207 350.1289 L153.5996 349.8877 153.4795 349.7793 153.1797 349.7793 c152.626 349.7793 L152.3252 349.7793 152.2051 349.8877 152.085 350.1289 c150.3652 353.6875 L150.3535 353.7119 150.3535 353.7119 150.3408 353.7119 c150.3291 353.7119 150.3291 353.7002 150.3291 353.6758 c150.3291 346.5449 L150.3291 346.4121 150.2207 346.3047 150.0879 346.3047 c149.5 346.3047 L149.3672 346.3047 149.2588 346.4121 149.2588 346.5449 c149.2588 354.8906 L149.2588 355.083 149.415 355.2393 149.6074 355.2393 c150.3887 355.2393 L150.6055 355.2393 150.7021 355.1914 150.7734 355.0352 c152.7578 350.9102 L152.8066 350.8018 152.8418 350.7773 152.9023 350.7773 c152.9629 350.7773 152.998 350.8018 153.0469 350.9102 c155.0313 355.0352 L155.1035 355.1914 155.1992 355.2393 155.416 355.2393 c156.1973 355.2393 L156.3906 355.2393 156.5469 355.083 156.5469 354.8906 c156.5469 346.5449 l156.5469 346.4121 156.4375 346.3047 156.3057 346.3047 cf162.6543 346.3047 m162.1016 346.3047 L161.9697 346.3047 161.8613 346.4121 161.8613 346.5449 c161.8613 346.8096 L161.2842 346.4727 160.6826 346.2207 160.0098 346.2207 c158.9873 346.2207 158.0488 346.665 158.0488 348.168 c158.0488 348.3125 L158.0488 349.6113 158.8066 350.2607 160.9473 350.2607 c161.8379 350.2607 L161.8379 350.7422 L161.8379 351.752 161.4883 352.1006 160.5508 352.1006 c159.7695 352.1006 159.1914 352.0527 158.7109 352.0039 c158.6865 352.0039 158.6748 352.0039 158.6504 352.0039 c158.543 352.0039 158.4336 352.041 158.4336 352.1973 c158.4336 352.6172 L158.4336 352.75 158.5176 352.8223 158.6865 352.8457 c159.1797 352.9307 159.7324 353.002 160.5508 353.002 c162.2227 353.002 162.8955 352.1602 162.8955 350.7422 c162.8955 346.5449 l162.8955 346.4121 162.7871 346.3047 162.6543 346.3047 cf1 D161.8379 349.5029 m160.9473 349.5029 L159.4922 349.5029 159.1074 349.1777 159.1074 348.3242 c159.1074 348.1807 L159.1074 347.3145 159.5156 347.0859 160.2139 347.0859 c160.7666 347.0859 161.2598 347.2539 161.8379 347.5664 C161.8379 349.5029 lf0 D167.6836 346.2803 m167.4434 346.2441 167.1309 346.2207 166.9023 346.2207 c165.7959 346.2207 165.2666 346.5088 165.2666 347.832 c165.2666 352.0283 L164.0996 352.1602 L163.9678 352.1729 163.8721 352.2451 163.8721 352.377 c163.8721 352.7012 L163.8721 352.834 163.9678 352.918 164.0996 352.918 c165.2666 352.918 L165.2666 354.0967 L165.2666 354.2168 165.3516 354.3135 165.4834 354.3379 c166.1084 354.4336 L166.1211 354.4336 166.1328 354.4336 166.1445 354.4336 c166.2402 354.4336 166.3242 354.3496 166.3242 354.2285 c166.3242 352.918 L167.624 352.918 L167.7559 352.918 167.8643 352.8105 167.8643 352.6777 c167.8643 352.2695 L167.8643 352.1367 167.7559 352.0283 167.624 352.0283 c166.3242 352.0283 L166.3242 347.832 L166.3242 347.1699 166.4932 347.0742 166.9746 347.0742 c167.6475 347.0742 L167.8164 347.0742 167.9004 347.0254 167.9004 346.9063 c167.9004 346.4844 l167.9004 346.377 167.8398 346.3047 167.6836 346.2803 cf173.8408 346.3047 m173.2637 346.3047 L173.1309 346.3047 173.0234 346.4121 173.0234 346.5449 c173.0234 350.501 L173.0234 351.7031 172.5176 352.0762 171.7363 352.0762 c171.3633 352.0762 170.6055 351.9805 170.0771 351.7402 c170.0771 346.5449 L170.0771 346.4248 169.9688 346.3047 169.8359 346.3047 c169.2471 346.3047 L169.127 346.3047 169.0186 346.4121 169.0186 346.5449 c169.0186 355.1074 L169.0186 355.2393 169.1152 355.3477 169.2471 355.3477 c169.8477 355.3477 L169.9805 355.3477 170.0771 355.2393 170.0771 355.1074 c170.0771 352.6299 L170.6543 352.8818 171.3994 353.002 171.916 353.002 c173.1914 353.002 174.0811 352.2695 174.0811 350.501 c174.0811 346.5449 l174.0811 346.4121 173.9727 346.3047 173.8408 346.3047 cf180.5869 349.2744 m176.5586 349.2744 L176.5586 349.1064 L176.5586 347.6758 177.123 347.1465 178.2305 347.1465 c178.9277 347.1465 179.8174 347.1943 180.3711 347.2783 c180.3945 347.2783 180.4063 347.2783 180.4307 347.2783 c180.5273 347.2783 180.623 347.2305 180.623 347.1104 c180.623 346.7012 L180.623 346.5449 180.5742 346.4609 180.3828 346.4248 c179.6973 346.292 179.0352 346.2207 178.2305 346.2207 c176.8467 346.2207 175.5 346.8691 175.5 349.1064 c175.5 350.1885 L175.5 351.9082 176.4502 353.002 178.1699 353.002 c179.9258 353.002 180.8154 351.8965 180.8154 350.1885 c180.8154 349.5391 l180.8154 349.3828 180.7314 349.2744 180.5869 349.2744 cf1 D179.7451 350.1885 m179.7451 351.5469 179.2285 352.0762 178.1699 352.0762 c177.1357 352.0762 176.5586 351.4873 176.5586 350.1885 c176.5586 350.0801 L179.7451 350.0801 L179.7451 350.1885 lf0 D189.9785 346.3047 m189.4014 346.3047 L189.2695 346.3047 189.1611 346.4121 189.1611 346.5449 c189.1611 350.8018 L189.1611 351.8125 188.6914 352.0879 188.0664 352.0879 c187.6338 352.0879 187.1289 351.9443 186.6602 351.7637 c186.7314 351.499 186.7676 351.1865 186.7676 350.8262 c186.7676 346.5449 L186.7676 346.4248 186.6836 346.3047 186.5518 346.3047 c185.9141 346.3047 L185.7939 346.3047 185.709 346.4121 185.709 346.5449 c185.709 350.8262 L185.709 351.8721 185.4092 352.0879 184.7832 352.0879 c184.3506 352.0879 183.8223 351.8721 183.3164 351.6191 c183.3164 346.5449 L183.3164 346.4248 183.2324 346.3047 183.0996 346.3047 c182.4629 346.3047 L182.3418 346.3047 182.2578 346.4121 182.2578 346.5449 c182.2578 352.6777 L182.2578 352.8105 182.3545 352.918 182.4863 352.918 c183.0879 352.918 L183.2207 352.918 183.3164 352.8105 183.3164 352.6777 c183.3164 352.4492 L183.7979 352.75 184.4111 353.0146 185.0723 353.0146 c185.5898 353.0146 185.9746 352.8701 186.2754 352.5215 c186.9365 352.834 187.6455 353.0146 188.2715 353.0146 c189.3535 353.0146 190.2188 352.4727 190.2188 350.8018 c190.2188 346.5449 l190.2188 346.4121 190.1113 346.3047 189.9785 346.3047 cf196.2197 346.3047 m195.666 346.3047 L195.5342 346.3047 195.4258 346.4121 195.4258 346.5449 c195.4258 346.8096 L194.8486 346.4727 194.248 346.2207 193.5742 346.2207 c192.5527 346.2207 191.6133 346.665 191.6133 348.168 c191.6133 348.3125 L191.6133 349.6113 192.3711 350.2607 194.5117 350.2607 c195.4023 350.2607 L195.4023 350.7422 L195.4023 351.752 195.0527 352.1006 194.1152 352.1006 c193.334 352.1006 192.7559 352.0527 192.2754 352.0039 c192.252 352.0039 192.2393 352.0039 192.2148 352.0039 c192.1074 352.0039 191.998 352.041 191.998 352.1973 c191.998 352.6172 L191.998 352.75 192.083 352.8223 192.252 352.8457 c192.7441 352.9307 193.2969 353.002 194.1152 353.002 c195.7871 353.002 196.4609 352.1602 196.4609 350.7422 c196.4609 346.5449 l196.4609 346.4121 196.3516 346.3047 196.2197 346.3047 cf1 D195.4023 349.5029 m194.5117 349.5029 L193.0566 349.5029 192.6719 349.1777 192.6719 348.3242 c192.6719 348.1807 L192.6719 347.3145 193.0811 347.0859 193.7793 347.0859 c194.332 347.0859 194.8242 347.2539 195.4023 347.5664 C195.4023 349.5029 lf0 D201.248 346.2803 m201.0078 346.2441 200.6953 346.2207 200.4668 346.2207 c199.3604 346.2207 198.832 346.5088 198.832 347.832 c198.832 352.0283 L197.665 352.1602 L197.5332 352.1729 197.4365 352.2451 197.4365 352.377 c197.4365 352.7012 L197.4365 352.834 197.5332 352.918 197.665 352.918 c198.832 352.918 L198.832 354.0967 L198.832 354.2168 198.916 354.3135 199.0479 354.3379 c199.6738 354.4336 L199.6855 354.4336 199.6973 354.4336 199.709 354.4336 c199.8057 354.4336 199.8896 354.3496 199.8896 354.2285 c199.8896 352.918 L201.1885 352.918 L201.3203 352.918 201.4287 352.8105 201.4287 352.6777 c201.4287 352.2695 L201.4287 352.1367 201.3203 352.0283 201.1885 352.0283 c199.8896 352.0283 L199.8896 347.832 L199.8896 347.1699 200.0586 347.0742 200.5391 347.0742 c201.2129 347.0742 L201.3809 347.0742 201.4648 347.0254 201.4648 346.9063 c201.4648 346.4844 l201.4648 346.377 201.4043 346.3047 201.248 346.2803 cf203.6143 353.9766 m203.001 353.9766 L202.8691 353.9766 202.7598 354.085 202.7598 354.2168 c202.7598 355.1797 L202.7598 355.3115 202.8691 355.4199 203.001 355.4199 c203.6143 355.4199 L203.7461 355.4199 203.8545 355.3115 203.8545 355.1797 c203.8545 354.2168 l203.8545 354.085 203.7461 353.9766 203.6143 353.9766 cf203.5898 346.3047 m203.0127 346.3047 L202.8809 346.3047 202.7725 346.4121 202.7725 346.5449 c202.7725 352.6777 L202.7725 352.8105 202.8809 352.918 203.0127 352.918 c203.5898 352.918 L203.7227 352.918 203.8301 352.8105 203.8301 352.6777 c203.8301 346.5449 l203.8301 346.4121 203.7227 346.3047 203.5898 346.3047 cf209.459 346.3525 m209.0615 346.2803 208.5205 346.2207 207.9551 346.2207 c206.3203 346.2207 205.3945 347.375 205.3945 349.1426 c205.3945 350.0801 L205.3945 351.8477 206.3086 353.002 207.9551 353.002 c208.5078 353.002 209.0615 352.9424 209.459 352.8701 c209.6504 352.834 209.6992 352.7734 209.6992 352.6055 c209.6992 352.1729 L209.6992 352.0527 209.6025 351.9922 209.4941 351.9922 c209.4707 351.9922 209.459 351.9922 209.4473 351.9922 c208.918 352.0527 208.5449 352.0762 207.9551 352.0762 c206.9932 352.0762 206.4521 351.4395 206.4521 350.0801 c206.4521 349.1426 L206.4521 347.7949 206.9805 347.1465 207.9551 347.1465 c208.5449 347.1465 208.918 347.1699 209.4473 347.2305 c209.459 347.2305 209.4707 347.2305 209.4941 347.2305 c209.6025 347.2305 209.6992 347.1699 209.6992 347.0498 c209.6992 346.6172 l209.6992 346.4609 209.6504 346.3887 209.459 346.3525 cf215.3262 346.3047 m214.7725 346.3047 L214.6406 346.3047 214.5322 346.4121 214.5322 346.5449 c214.5322 346.8096 L213.9551 346.4727 213.3535 346.2207 212.6797 346.2207 c211.6582 346.2207 210.7207 346.665 210.7207 348.168 c210.7207 348.3125 L210.7207 349.6113 211.4775 350.2607 213.6182 350.2607 c214.5078 350.2607 L214.5078 350.7422 L214.5078 351.752 214.1592 352.1006 213.2207 352.1006 c212.4395 352.1006 211.8623 352.0527 211.3809 352.0039 c211.3574 352.0039 211.3457 352.0039 211.3213 352.0039 c211.2129 352.0039 211.1045 352.041 211.1045 352.1973 c211.1045 352.6172 L211.1045 352.75 211.1895 352.8223 211.3574 352.8457 c211.8506 352.9307 212.4043 353.002 213.2207 353.002 c214.8926 353.002 215.5664 352.1602 215.5664 350.7422 c215.5664 346.5449 l215.5664 346.4121 215.458 346.3047 215.3262 346.3047 cf1 D214.5078 349.5029 m213.6182 349.5029 L212.1631 349.5029 211.7783 349.1777 211.7783 348.3242 c211.7783 348.1807 L211.7783 347.3145 212.1875 347.0859 212.8848 347.0859 c213.4375 347.0859 213.9307 347.2539 214.5078 347.5664 C214.5078 349.5029 lf0 D218.1641 346.3047 m217.5391 346.3047 L217.418 346.3047 217.3223 346.4121 217.3223 346.5449 c217.3223 355.1191 L217.3223 355.2393 217.4063 355.3477 217.5391 355.3477 c218.1641 355.3477 L218.2842 355.3477 218.3809 355.251 218.3809 355.1191 c218.3809 346.5449 l218.3809 346.4248 218.2959 346.3047 218.1641 346.3047 cf230.5 346.3047 m229.9111 346.3047 L229.7793 346.3047 229.6709 346.4121 229.6709 346.5449 c229.6709 353.6758 L229.6709 353.7002 229.6709 353.7119 229.6582 353.7119 c229.6465 353.7119 229.6465 353.7119 229.6348 353.6875 c227.915 350.1289 L227.7949 349.8877 227.6738 349.7793 227.374 349.7793 c226.8203 349.7793 L226.5195 349.7793 226.4004 349.8877 226.2793 350.1289 c224.5605 353.6875 L224.5479 353.7119 224.5479 353.7119 224.5361 353.7119 c224.5234 353.7119 224.5234 353.7002 224.5234 353.6758 c224.5234 346.5449 L224.5234 346.4121 224.416 346.3047 224.2832 346.3047 c223.6934 346.3047 L223.5625 346.3047 223.4531 346.4121 223.4531 346.5449 c223.4531 354.8906 L223.4531 355.083 223.6094 355.2393 223.8027 355.2393 c224.584 355.2393 L224.8008 355.2393 224.8965 355.1914 224.9688 355.0352 c226.9531 350.9102 L227.001 350.8018 227.0371 350.7773 227.0977 350.7773 c227.1572 350.7773 227.1934 350.8018 227.2422 350.9102 c229.2256 355.0352 L229.2979 355.1914 229.3945 355.2393 229.6113 355.2393 c230.3926 355.2393 L230.584 355.2393 230.7412 355.083 230.7412 354.8906 c230.7412 346.5449 l230.7412 346.4121 230.6328 346.3047 230.5 346.3047 cf234.8525 346.2207 m233.084 346.2207 232.1826 347.3867 232.1826 349.1543 c232.1826 350.0684 L232.1826 351.8359 233.084 353.002 234.8525 353.002 c236.6201 353.002 237.5342 351.8359 237.5342 350.0684 c237.5342 349.1543 l237.5342 347.3867 236.6201 346.2207 234.8525 346.2207 cf1 D236.4766 350.0684 m236.4766 351.2949 235.9824 352.0762 234.8525 352.0762 c233.7344 352.0762 233.2412 351.3066 233.2412 350.0684 c233.2412 349.1543 L233.2412 347.9277 233.7227 347.1465 234.8525 347.1465 c235.9707 347.1465 236.4766 347.916 236.4766 349.1543 C236.4766 350.0684 lf0 D243.5703 346.4248 m242.8252 346.2803 242.0918 346.2207 241.3574 346.2207 c239.5664 346.2207 238.7363 347.3867 238.7363 349.1904 c238.7363 350.0566 L238.7363 351.9443 239.6025 353.002 241.3574 353.002 c241.7305 353.002 242.2959 352.9668 242.7656 352.8818 c242.7656 355.1191 L242.7656 355.2393 242.8613 355.3477 242.9941 355.3477 c243.6074 355.3477 L243.7266 355.3477 243.8232 355.251 243.8232 355.1191 c243.8232 346.7012 l243.8232 346.5449 243.7871 346.4609 243.5703 346.4248 cf1 D242.7656 351.9922 m242.3682 352.0645 241.7432 352.0762 241.3574 352.0762 c240.1797 352.0762 239.7949 351.3438 239.7949 350.0566 c239.7949 349.1904 L239.7949 347.8799 240.168 347.1465 241.3574 347.1465 c241.7676 347.1465 242.3564 347.1816 242.7656 347.2188 C242.7656 351.9922 lf0 D250.3291 349.2744 m246.3008 349.2744 L246.3008 349.1064 L246.3008 347.6758 246.8652 347.1465 247.9727 347.1465 c248.6699 347.1465 249.5596 347.1943 250.1123 347.2783 c250.1367 347.2783 250.1484 347.2783 250.1729 347.2783 c250.2695 347.2783 250.3652 347.2305 250.3652 347.1104 c250.3652 346.7012 L250.3652 346.5449 250.3164 346.4609 250.125 346.4248 c249.4395 346.292 248.7773 346.2207 247.9727 346.2207 c246.5889 346.2207 245.2422 346.8691 245.2422 349.1064 c245.2422 350.1885 L245.2422 351.9082 246.1914 353.002 247.9121 353.002 c249.668 353.002 250.5576 351.8965 250.5576 350.1885 c250.5576 349.5391 l250.5576 349.3828 250.4727 349.2744 250.3291 349.2744 cf1 D249.4873 350.1885 m249.4873 351.5469 248.9707 352.0762 247.9121 352.0762 c246.877 352.0762 246.3008 351.4873 246.3008 350.1885 c246.3008 350.0801 L249.4873 350.0801 L249.4873 350.1885 lf0 D252.9629 346.3047 m252.3369 346.3047 L252.2168 346.3047 252.1211 346.4121 252.1211 346.5449 c252.1211 355.1191 L252.1211 355.2393 252.2051 355.3477 252.3369 355.3477 c252.9629 355.3477 L253.082 355.3477 253.1787 355.251 253.1787 355.1191 c253.1787 346.5449 l253.1787 346.4248 253.0947 346.3047 252.9629 346.3047 cf255.9082 353.9766 m255.2949 353.9766 L255.1621 353.9766 255.0547 354.085 255.0547 354.2168 c255.0547 355.1797 L255.0547 355.3115 255.1621 355.4199 255.2949 355.4199 c255.9082 355.4199 L256.041 355.4199 256.1484 355.3115 256.1484 355.1797 c256.1484 354.2168 l256.1484 354.085 256.041 353.9766 255.9082 353.9766 cf255.8848 346.3047 m255.3066 346.3047 L255.1748 346.3047 255.0664 346.4121 255.0664 346.5449 c255.0664 352.6777 L255.0664 352.8105 255.1748 352.918 255.3066 352.918 c255.8848 352.918 L256.0166 352.918 256.125 352.8105 256.125 352.6777 c256.125 346.5449 l256.125 346.4121 256.0166 346.3047 255.8848 346.3047 cf262.8125 346.3047 m262.2344 346.3047 L262.1025 346.3047 261.9941 346.4121 261.9941 346.5449 c261.9941 350.501 L261.9941 351.7158 261.5859 352.0879 260.6719 352.0879 c260.166 352.0879 259.6016 351.8965 259.0479 351.6191 c259.0479 346.5449 L259.0479 346.4248 258.9395 346.3047 258.8076 346.3047 c258.2188 346.3047 L258.0977 346.3047 257.9902 346.4121 257.9902 346.5449 c257.9902 352.6777 L257.9902 352.8105 258.0859 352.918 258.2188 352.918 c258.8193 352.918 L258.9512 352.918 259.0479 352.8105 259.0479 352.6777 c259.0479 352.4492 L259.709 352.8223 260.25 353.002 260.96 353.002 c262.4023 353.002 263.0527 352.1006 263.0527 350.501 c263.0527 346.5449 l263.0527 346.4121 262.9443 346.3047 262.8125 346.3047 cf269.8574 352.1123 m269.4258 352.0283 L269.6406 351.7998 269.834 351.4395 269.834 350.79 c269.834 350.6934 L269.834 349.3711 269.0156 348.6367 267.1641 348.6367 c266.5273 348.6367 266.1182 348.7334 265.7695 348.8779 c265.5645 348.7813 265.4688 348.6494 265.4688 348.4688 c265.4688 348.2646 265.5645 348.1563 265.8418 348.084 c267.6328 347.627 L268.8125 347.3262 269.9414 346.9902 269.9414 345.8594 c269.9414 345.7637 L269.9414 344.6084 269.1719 343.8994 267.2012 343.8994 c265.3008 343.8994 264.4346 344.6328 264.4346 345.8115 c264.4346 345.9199 L264.4346 346.5928 264.7949 347.1465 265.1914 347.4473 c265.1074 347.4824 L264.7227 347.6514 264.5547 348.0479 264.5547 348.4209 c264.5547 348.4326 L264.5547 348.7578 264.7109 349.1064 265.0479 349.2988 c264.6748 349.6475 264.4941 350.0801 264.4941 350.6934 c264.4941 350.79 L264.4941 351.8604 265.0957 352.918 267.1641 352.918 c269.7988 352.918 L269.9414 352.918 270.0742 352.7979 270.0742 352.6543 c270.0742 352.3418 l270.0742 352.1846 269.9902 352.1367 269.8574 352.1123 cf1 D268.8848 345.8594 m268.8848 346.3281 268.5 346.5215 267.418 346.7969 c266.0586 347.1465 L265.709 346.8457 265.4688 346.5449 265.4688 345.9199 c265.4688 345.8115 L265.4688 345.1377 265.8652 344.7168 267.2012 344.7168 c268.5723 344.7168 268.8848 345.1016 268.8848 345.7637 C268.8848 345.8594 lf268.7871 350.79 m268.7871 351.5117 268.4629 352.0762 267.1641 352.0762 c265.8174 352.0762 265.541 351.4629 265.541 350.79 c265.541 350.6934 L265.541 350.1641 265.7813 349.4668 267.1641 349.4668 c268.4629 349.4668 268.7871 349.9727 268.7871 350.6934 C268.7871 350.79 lf0 D-14.1304 346.2217 m-15.0444 346.2217 -15.9702 346.2813 -16.3193 346.3408 c-16.4751 346.3652 -16.5718 346.4619 -16.5718 346.6416 c-16.5718 354.9033 L-16.5718 355.0713 -16.4751 355.1807 -16.3193 355.2041 c-15.9702 355.2646 -15.0444 355.3242 -14.1304 355.3242 c-11.9058 355.3242 -10.4868 354.1816 -10.4868 351.584 c-10.4868 349.9609 l-10.4868 347.3877 -11.9058 346.2217 -14.1304 346.2217 cf1 D-11.5811 351.584 m-11.5811 353.7607 -12.6875 354.3867 -14.1304 354.3867 c-14.6958 354.3867 -15.0684 354.374 -15.4653 354.3506 c-15.4653 347.1826 L-15.0806 347.1592 -14.6958 347.1592 -14.1304 347.1592 c-12.6875 347.1592 -11.5811 347.7959 -11.5811 349.9609 C-11.5811 351.584 lf0 D-4.11328 349.2754 m-8.14209 349.2754 L-8.14209 349.1064 L-8.14209 347.6768 -7.57666 347.1475 -6.47021 347.1475 c-5.77295 347.1475 -4.88281 347.1953 -4.32959 347.2793 c-4.30615 347.2793 -4.29395 347.2793 -4.26953 347.2793 c-4.17334 347.2793 -4.07715 347.2314 -4.07715 347.1113 c-4.07715 346.7021 L-4.07715 346.5459 -4.12549 346.4619 -4.31787 346.4258 c-5.00342 346.293 -5.66455 346.2217 -6.47021 346.2217 c-7.85303 346.2217 -9.2002 346.8701 -9.2002 349.1064 c-9.2002 350.1895 L-9.2002 351.9092 -8.25 353.0039 -6.53076 353.0039 c-4.7749 353.0039 -3.88477 351.8975 -3.88477 350.1895 c-3.88477 349.54 l-3.88477 349.3838 -3.96875 349.2754 -4.11328 349.2754 cf1 D-4.95508 350.1895 m-4.95508 351.5479 -5.47217 352.0771 -6.53076 352.0771 c-7.56494 352.0771 -8.14209 351.4883 -8.14209 350.1895 c-8.14209 350.0811 L-4.95508 350.0811 L-4.95508 350.1895 lf0 D0.023438 346.2217 m-0.349609 346.2217 -0.914551 346.2686 -1.38379 346.3535 c-1.38379 344.1768 L-1.38379 344.0566 -1.47998 343.9482 -1.6123 343.9482 c-2.22559 343.9482 L-2.3457 343.9482 -2.44189 344.0439 -2.44189 344.1768 c-2.44189 352.4502 L-2.44189 352.6064 -2.40576 352.6787 -2.18896 352.7275 c-1.55225 352.8828 -0.709961 353.0039 0.023438 353.0039 c1.81494 353.0039 2.64502 351.8369 2.64502 350.0332 c2.64502 349.167 l2.64502 347.2793 1.77881 346.2217 0.023438 346.2217 cf1 D1.58643 350.0332 m1.58643 351.2959 1.21387 352.1133 0.023438 352.1133 c-0.481934 352.1133 -1.04736 352.0537 -1.38379 351.9932 c-1.38379 347.2314 L-0.986816 347.1592 -0.361328 347.1113 0.023438 347.1113 c1.20166 347.1113 1.58643 347.8809 1.58643 349.167 C1.58643 350.0332 lf0 D8.42871 346.3047 m7.87549 346.3047 L7.74365 346.3047 7.63525 346.4131 7.63525 346.5459 c7.63525 346.8105 L7.05811 346.4736 6.45703 346.2217 5.7832 346.2217 c4.76123 346.2217 3.82324 346.666 3.82324 348.1689 c3.82324 348.3135 L3.82324 349.6123 4.58105 350.2617 6.72119 350.2617 c7.61133 350.2617 L7.61133 350.7422 L7.61133 351.7529 7.2627 352.1016 6.32471 352.1016 c5.54297 352.1016 4.96533 352.0537 4.48438 352.0049 c4.46045 352.0049 4.44873 352.0049 4.42432 352.0049 c4.31641 352.0049 4.20801 352.042 4.20801 352.1982 c4.20801 352.6182 L4.20801 352.751 4.29199 352.8232 4.46045 352.8467 c4.95361 352.9307 5.50635 353.0039 6.32471 353.0039 c7.99561 353.0039 8.66943 352.1611 8.66943 350.7422 c8.66943 346.5459 l8.66943 346.4131 8.56104 346.3047 8.42871 346.3047 cf1 D7.61133 349.5039 m6.72119 349.5039 L5.26611 349.5039 4.88135 349.1787 4.88135 348.3252 c4.88135 348.1807 L4.88135 347.3154 5.29004 347.0869 5.98779 347.0869 c6.54102 347.0869 7.03369 347.2549 7.61133 347.5674 C7.61133 349.5039 lf0 D13.0225 352.0889 m12.4697 352.0889 11.9644 351.9453 11.3628 351.584 c11.3628 346.5459 L11.3628 346.4258 11.2549 346.3047 11.1226 346.3047 c10.5332 346.3047 L10.4131 346.3047 10.3047 346.4131 10.3047 346.5459 c10.3047 352.6787 L10.3047 352.8105 10.4009 352.9189 10.5332 352.9189 c11.0986 352.9189 L11.231 352.9189 11.3271 352.8105 11.3271 352.6787 c11.3271 352.4268 L11.9282 352.8467 12.4814 353.0039 13.0225 353.0039 c13.1909 353.0039 13.2749 352.9307 13.2749 352.7871 c13.2749 352.2939 l13.2749 352.1611 13.1909 352.0889 13.0225 352.0889 cf17.7124 346.2813 m17.4722 346.2451 17.1592 346.2217 16.9307 346.2217 c15.8242 346.2217 15.2954 346.5098 15.2954 347.833 c15.2954 352.0293 L14.1284 352.1611 L13.9966 352.1738 13.9004 352.2461 13.9004 352.3779 c13.9004 352.7021 L13.9004 352.835 13.9966 352.9189 14.1284 352.9189 c15.2954 352.9189 L15.2954 354.0977 L15.2954 354.2178 15.3794 354.3145 15.5117 354.3389 c16.1372 354.4346 L16.1489 354.4346 16.1611 354.4346 16.1733 354.4346 c16.2695 354.4346 16.3535 354.3506 16.3535 354.2295 c16.3535 352.9189 L17.6523 352.9189 L17.7847 352.9189 17.8926 352.8105 17.8926 352.6787 c17.8926 352.2695 L17.8926 352.1377 17.7847 352.0293 17.6523 352.0293 c16.3535 352.0293 L16.3535 347.833 L16.3535 347.1709 16.522 347.0752 17.0029 347.0752 c17.6763 347.0752 L17.8447 347.0752 17.9287 347.0264 17.9287 346.9072 c17.9287 346.4854 l17.9287 346.3779 17.8687 346.3047 17.7124 346.2813 cf26.7676 346.3047 m26.1899 346.3047 L26.0576 346.3047 25.9497 346.4131 25.9497 346.5459 c25.9497 350.8027 L25.9497 351.8125 25.481 352.0889 24.8555 352.0889 c24.4224 352.0889 23.9175 351.9453 23.4487 351.7646 c23.521 351.5 23.5566 351.1875 23.5566 350.8271 c23.5566 346.5459 L23.5566 346.4258 23.4727 346.3047 23.3403 346.3047 c22.7026 346.3047 L22.5825 346.3047 22.4985 346.4131 22.4985 346.5459 c22.4985 350.8271 L22.4985 351.873 22.1978 352.0889 21.5723 352.0889 c21.1396 352.0889 20.6104 351.873 20.1055 351.6201 c20.1055 346.5459 L20.1055 346.4258 20.021 346.3047 19.8892 346.3047 c19.2515 346.3047 L19.1313 346.3047 19.0474 346.4131 19.0474 346.5459 c19.0474 352.6787 L19.0474 352.8105 19.1431 352.9189 19.2759 352.9189 c19.877 352.9189 L20.0093 352.9189 20.1055 352.8105 20.1055 352.6787 c20.1055 352.4502 L20.5864 352.751 21.1997 353.0146 21.8613 353.0146 c22.3784 353.0146 22.7632 352.8711 23.064 352.5225 c23.7251 352.835 24.4346 353.0146 25.0601 353.0146 c26.1421 353.0146 27.0083 352.4736 27.0083 350.8027 c27.0083 346.5459 l27.0083 346.4131 26.8999 346.3047 26.7676 346.3047 cf33.5137 349.2754 m29.4849 349.2754 L29.4849 349.1064 L29.4849 347.6768 30.0503 347.1475 31.1567 347.1475 c31.854 347.1475 32.7441 347.1953 33.2974 347.2793 c33.3213 347.2793 33.333 347.2793 33.3574 347.2793 c33.4536 347.2793 33.5498 347.2314 33.5498 347.1113 c33.5498 346.7021 L33.5498 346.5459 33.5015 346.4619 33.3091 346.4258 c32.6235 346.293 31.9624 346.2217 31.1567 346.2217 c29.7739 346.2217 28.4268 346.8701 28.4268 349.1064 c28.4268 350.1895 L28.4268 351.9092 29.377 353.0039 31.0967 353.0039 c32.8521 353.0039 33.7422 351.8975 33.7422 350.1895 c33.7422 349.54 l33.7422 349.3838 33.6582 349.2754 33.5137 349.2754 cf1 D32.6719 350.1895 m32.6719 351.5479 32.1548 352.0771 31.0967 352.0771 c30.062 352.0771 29.4849 351.4883 29.4849 350.1895 c29.4849 350.0811 L32.6719 350.0811 L32.6719 350.1895 lf0 D40.0073 346.3047 m39.4302 346.3047 L39.2979 346.3047 39.1895 346.4131 39.1895 346.5459 c39.1895 350.502 L39.1895 351.7168 38.7808 352.0889 37.8667 352.0889 c37.3618 352.0889 36.7964 351.8975 36.2432 351.6201 c36.2432 346.5459 L36.2432 346.4258 36.1353 346.3047 36.0029 346.3047 c35.4136 346.3047 L35.2935 346.3047 35.1851 346.4131 35.1851 346.5459 c35.1851 352.6787 L35.1851 352.8105 35.2813 352.9189 35.4136 352.9189 c36.0146 352.9189 L36.147 352.9189 36.2432 352.8105 36.2432 352.6787 c36.2432 352.4502 L36.9048 352.8232 37.4458 353.0039 38.1553 353.0039 c39.5981 353.0039 40.248 352.1016 40.248 350.502 c40.248 346.5459 l40.248 346.4131 40.1396 346.3047 40.0073 346.3047 cf45.1782 346.2813 m44.938 346.2451 44.625 346.2217 44.3965 346.2217 c43.29 346.2217 42.7612 346.5098 42.7612 347.833 c42.7612 352.0293 L41.5942 352.1611 L41.4624 352.1738 41.3657 352.2461 41.3657 352.3779 c41.3657 352.7021 L41.3657 352.835 41.4624 352.9189 41.5942 352.9189 c42.7612 352.9189 L42.7612 354.0977 L42.7612 354.2178 42.8452 354.3145 42.9775 354.3389 c43.6025 354.4346 L43.6147 354.4346 43.627 354.4346 43.6387 354.4346 c43.7349 354.4346 43.8193 354.3506 43.8193 354.2295 c43.8193 352.9189 L45.1177 352.9189 L45.25 352.9189 45.3584 352.8105 45.3584 352.6787 c45.3584 352.2695 L45.3584 352.1377 45.25 352.0293 45.1177 352.0293 c43.8193 352.0293 L43.8193 347.833 L43.8193 347.1709 43.9873 347.0752 44.4683 347.0752 c45.1421 347.0752 L45.3105 347.0752 45.3945 347.0264 45.3945 346.9072 c45.3945 346.4854 l45.3945 346.3779 45.3345 346.3047 45.1782 346.2813 cf51.8799 346.2217 m50.1118 346.2217 49.21 347.3877 49.21 349.1553 c49.21 350.0693 L49.21 351.8369 50.1118 353.0039 51.8799 353.0039 c53.6475 353.0039 54.561 351.8369 54.561 350.0693 c54.561 349.1553 l54.561 347.3877 53.6475 346.2217 51.8799 346.2217 cf1 D53.5029 350.0693 m53.5029 351.2959 53.0103 352.0771 51.8799 352.0771 c50.7612 352.0771 50.2681 351.3076 50.2681 350.0693 c50.2681 349.1553 L50.2681 347.9287 50.7495 347.1475 51.8799 347.1475 c52.998 347.1475 53.5029 347.917 53.5029 349.1553 C53.5029 350.0693 lf0 D59.2271 354.6143 m58.6499 354.6143 L58.0845 354.6143 57.9165 354.4463 57.9165 353.7852 c57.9165 352.9189 L59.1792 352.9189 L59.311 352.9189 59.4077 352.8232 59.4077 352.7021 c59.4077 352.2334 L59.4077 352.1133 59.311 352.0293 59.1792 352.0293 c57.9165 352.0293 L57.9165 346.5459 L57.9165 346.4258 57.8081 346.3047 57.6875 346.3047 c57.0986 346.3047 L56.9663 346.3047 56.8579 346.4258 56.8579 346.5459 c56.8579 352.0293 L55.6914 352.1611 L55.5591 352.1738 55.4629 352.2578 55.4629 352.3779 c55.4629 352.7021 L55.4629 352.8232 55.5591 352.9189 55.6914 352.9189 c56.8579 352.9189 L56.8579 353.7852 L56.8579 355.0713 57.4834 355.4561 58.5415 355.4561 c58.8662 355.4561 59.0586 355.4209 59.2148 355.3848 c59.3472 355.3486 59.4434 355.2998 59.4434 355.1924 c59.4434 354.7959 l59.4434 354.6631 59.3594 354.6143 59.2271 354.6143 cf*Uu*u0 0.91 0.72 0.23 k-27.061 368.9834 m-27.061 346.3066 L-30.6328 346.3066 L-30.6328 368.9834 L-27.061 368.9834 Lf*UULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF